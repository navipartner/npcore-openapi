{
  "openapi": "3.0.1",
  "info": {
    "title": "default",
    "version": ""
  },
  "paths": {
    "/{saasguid}/{saasenv}/{company}/memberships/{membershipId}/member/{memberId}/card": {
      "post": {
        "description": "This endpoint allows you to add an additional card for an existing member under a specific membership. It is useful when a member needs a new card for identification or for cases where multiple cards are allowed for the same member (e.g., secondary or replacement cards).",
        "operationId": "memberships_serviceCard_addCard",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleAddCard": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleAddCard": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleAddCard": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleAddCard": {
                "value": 1224
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleAddCard": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsAddCardResponse"
                },
                "examples": {
                  "ExampleAddCard": {
                    "value": {
                      "card": {
                        "cardId": 123434,
                        "cardNumber": "MC1234567890",
                        "expiryDate": "2029-09-17",
                        "temporary": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Add Card",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsAddCardRequest"
              },
              "examples": {
                "ExampleAddCard": {
                  "value": {
                    "cardNumber": "MC1234567890",
                    "expiryDate": "2029-09-17"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/{membershipId}/member/{memberId}/card/{cardId}/replace": {
      "post": {
        "description": "Use this endpoint to replace an existing member card with a new one. When a card is replaced, the old card is blocked, and a new card is issued to the member. This is typically used when a card is lost, damaged, or needs to be reissued.",
        "operationId": "memberships_serviceCard_replaceCard",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleReplaceCard": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleReplaceCard": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleReplaceCard": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleReplaceCard": {
                "value": 1224
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleReplaceCard": {
                "value": 4331
              }
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardId"
            },
            "example": 598,
            "examples": {
              "ExampleReplaceCard": {
                "value": 598
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsReplaceCardResponse"
                },
                "examples": {
                  "ExampleReplaceCard": {
                    "value": {
                      "card": [
                        {
                          "cardId": 598,
                          "cardNumber": "MC-XXXX-67891",
                          "expiryDate": "2029-09-17",
                          "temporary": false,
                          "blocked": true
                        },
                        {
                          "cardId": 123434,
                          "cardNumber": "MC1234567890",
                          "expiryDate": "2029-09-17",
                          "temporary": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Replace Card",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsReplaceCardRequest"
              },
              "examples": {
                "ExampleReplaceCard": {
                  "value": {
                    "cardNumber": "MC1234567890",
                    "expiryDate": "2029-09-17"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/card/id/{cardId}": {
      "get": {
        "description": "Retrieve details about a specific card using its unique card ID. This endpoint provides detailed information about the card, such as the member it belongs to, its status, and its validity.",
        "operationId": "memberships_serviceCard_getCardId",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetCard": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetCard": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetCard": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardId"
            },
            "example": 123434,
            "examples": {
              "ExampleGetCard": {
                "value": 123434
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetCardResponse"
                },
                "examples": {
                  "ExampleGetCard": {
                    "value": {
                      "card": {
                        "cardId": 123434,
                        "cardNumber": "MC1234567890",
                        "expiryDate": "2029-09-17",
                        "temporary": false,
                        "member": {
                          "memberId": 4331,
                          "memberNumber": "M123456789",
                          "firstName": "John",
                          "middleName": "A.",
                          "lastName": "Doe",
                          "address": "123 Main Street",
                          "postCode": "12345",
                          "city": "New York",
                          "country": "USA",
                          "birthday": "1980-01-01",
                          "gender": "male",
                          "newsletter": true,
                          "phoneNo": "+1234567890",
                          "email": "john.doe@acme.com",
                          "blocked": false
                        },
                        "membership": {
                          "membershipId": 1224,
                          "membershipNumber": "MS-DEMO-00152",
                          "communityCode": "RIVERLAND",
                          "membershipCode": "GOLD",
                          "issueDate": "2024-09-17",
                          "validFromDate": "2024-09-17",
                          "validUntilDate": "2025-09-16",
                          "customerNumber": "D000188",
                          "blocked": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Id"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/card/number/{cardNumber}": {
      "get": {
        "description": "Retrieve details of a specific card using its card number. This endpoint allows access to card information when the card number is known, providing key details such as the card's status and associated member.",
        "operationId": "memberships_serviceCard_getCardNumber",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetCard": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetCard": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetCard": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "cardNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardNumber"
            },
            "example": "MC1234567890",
            "examples": {
              "ExampleGetCard": {
                "value": "MC1234567890"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetCardResponse"
                },
                "examples": {
                  "ExampleGetCard": {
                    "value": {
                      "card": {
                        "cardId": 123434,
                        "cardNumber": "MC1234567890",
                        "expiryDate": "2029-09-17",
                        "temporary": false,
                        "member": {
                          "memberId": 4331,
                          "memberNumber": "M123456789",
                          "firstName": "John",
                          "middleName": "A.",
                          "lastName": "Doe",
                          "address": "123 Main Street",
                          "postCode": "12345",
                          "city": "New York",
                          "country": "USA",
                          "birthday": "1980-01-01",
                          "gender": "male",
                          "newsletter": true,
                          "phoneNo": "+1234567890",
                          "email": "john.doe@acme.com",
                          "blocked": false
                        },
                        "membership": {
                          "membershipId": 1224,
                          "membershipNumber": "MS-DEMO-00152",
                          "communityCode": "RIVERLAND",
                          "membershipCode": "GOLD",
                          "issueDate": "2024-09-17",
                          "validFromDate": "2024-09-17",
                          "validUntilDate": "2025-09-16",
                          "customerNumber": "D000188",
                          "blocked": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Number"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/card/{cardNumber}/register-arrival": {
      "post": {
        "description": "This endpoint registers the member's arrival at a facility using their card. The card number is used to log the arrival and generate a ticket for the member. Use Ticketing API to retrieve ticket details using the ticket number.",
        "operationId": "memberships_serviceCard_registerArrival",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleRegisterArrival": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleRegisterArrival": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleRegisterArrival": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "cardNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardNumber"
            },
            "example": "MC1234567890",
            "examples": {
              "ExampleRegisterArrival": {
                "value": "MC1234567890"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsRegisterArrivalResponse"
                },
                "examples": {
                  "ExampleRegisterArrival": {
                    "value": {
                      "cardNumber": "MC1234567890",
                      "ticketNumber": "TICKET123"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Register Arrival",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsRegisterArrivalRequest"
              },
              "examples": {
                "ExampleRegisterArrival": {
                  "value": {
                    "admissionCode": "CASTLE"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/card/{cardNumber}/sendToWallet": {
      "post": {
        "description": "Sends the card to the apple wallet via email or phone number specified in the request.",
        "operationId": "memberships_serviceCard_sendToWallet",
        "tags": [
          "MembershipsServiceCard"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "cardNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardNumber"
            },
            "example": "MC1234567890",
            "examples": {
              "Example1": {
                "value": "MC1234567890"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsWalletSentResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "cardNumber": "MC1234567890",
                      "cardSent": true
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Send to Wallet",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsSendWalletRequest"
              },
              "examples": {
                "Example1": {
                  "value": {
                    "notificationAddress": "+46701234567"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/membership/catalog/{storeCode}": {
      "get": {
        "description": "Get the list of membership items and their descriptions for a specific store.",
        "operationId": "memberships_serviceCatalog_getCatalog",
        "tags": [
          "MembershipsServiceCatalog"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleCatalog1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleCatalog1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleCatalog1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesStoreCode"
            },
            "example": "EN",
            "examples": {
              "ExampleCatalog1": {
                "value": "EN"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsStoreCatalogResponse"
                },
                "examples": {
                  "ExampleCatalog1": {
                    "value": {
                      "storeCode": "EN",
                      "items": [
                        {
                          "itemNumber": "M12345",
                          "type": "new_membership",
                          "recommendedPrice": 100,
                          "membershipCode": "GOLD",
                          "itemDescription": "Membership Item",
                          "shortDescription": "Short Description including HTML styling",
                          "fullDescription": "Full Description including HTML styling"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Catalog"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/history": {
      "get": {
        "description": "Use this endpoint to retrieve the lifecycle history of a membership. It provides a chronological log of events, including creation, renewals, upgrades, and cancellations.",
        "operationId": "memberships_serviceLifecycle_getMembershipHistory",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMembershipHistory": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMembershipHistory": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMembershipHistory": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleGetMembershipHistory": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMembershipHistoryResponse"
                },
                "examples": {
                  "ExampleGetMembershipHistory": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 1223,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2025-09-16",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Membership History"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/activate": {
      "post": {
        "description": "Activate a membership that has been created but is not yet active. This is commonly used when a membership is set up ahead of time and needs to be activated for use.",
        "operationId": "memberships_serviceLifecycle_activateMembership",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleActivateMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleActivateMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleActivateMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleActivateMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsConfirmMembershipActivateResponse"
                },
                "examples": {
                  "ExampleActivateMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 1223,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2025-09-16",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Activate Membership"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/cancel": {
      "post": {
        "description": "Cancel an active membership using this endpoint. You can provide a cancellation date, allowing the membership to run until that date, or cancel it immediately.",
        "operationId": "memberships_serviceLifecycle_cancelMembership",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleCancelMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleCancelMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleCancelMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleCancelMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsConfirmMembershipCancelResponse"
                },
                "examples": {
                  "ExampleCancelMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2024-10-07",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 2332,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2024-10-07",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Cancel Membership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsCancelMembershipRequest"
              },
              "examples": {
                "ExampleCancelMembership": {
                  "value": {
                    "cancelDate": "2024-10-07"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/renew/options": {
      "get": {
        "description": "Retrieve a list of available renewal options for a membership. Each option is represented by an `itemNumber`, which includes predefined configurations such as price, duration, and other relevant details. The `itemNumber` returned from this endpoint can be used as a parameter in the `renewMembership` endpoint to proceed with the renewal.",
        "operationId": "memberships_serviceLifecycle_getRenewalOptions",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetRenewOptions": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetRenewOptions": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetRenewOptions": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleGetRenewOptions": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetRenewOptionsResponse"
                },
                "examples": {
                  "ExampleGetRenewOptions": {
                    "value": {
                      "renewalOptions": [
                        {
                          "itemNumber": "RENEW-12346",
                          "lifecycleAction": "renew",
                          "description": "Renew GOLD Membership for 1 year",
                          "targetMembershipCode": "GOLD",
                          "periodStart": "2025-09-17",
                          "periodEnd": "2026-09-16",
                          "amount": 80,
                          "amountInclVat": 100,
                          "memberCardinality": 2,
                          "presentationOrder": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Renewal Options"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/renew": {
      "post": {
        "description": "Use this endpoint to renew an existing membership. The renewal will **add a new period** after the current membership period expires. To renew, you must provide the `itemNumber` from the `getRenewalOptions` endpoint, which specifies the predefined renewal configuration such as price and duration.",
        "operationId": "memberships_serviceLifecycle_renewMembership",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleRenewMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleRenewMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleRenewMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleRenewMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsConfirmMembershipRenewResponse"
                },
                "examples": {
                  "ExampleRenewMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2025-09-17",
                        "validUntilDate": "2026-09-16",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 1223,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2025-09-16",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          },
                          {
                            "timeEntryId": 3443,
                            "validFromDate": "2025-09-17",
                            "validUntilDate": "2026-09-16",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "renew",
                            "itemNumber": "RENEW-12346",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R987654321",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Renew Membership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsRenewMembershipRequest"
              },
              "examples": {
                "ExampleRenewMembership": {
                  "value": {
                    "renewWithItem": "RENEW-12346"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/upgrade/options": {
      "get": {
        "description": "Retrieve a list of available upgrade options for a membership. Each upgrade option is represented by an `itemNumber`, which includes predefined details such as the upgraded benefits and any pricing adjustments. The `itemNumber` returned from this endpoint can be used as a parameter in the `upgradeMembership` endpoint to execute the upgrade.",
        "operationId": "memberships_serviceLifecycle_getUpgradeOptions",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetUpgradeOptions": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetUpgradeOptions": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetUpgradeOptions": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleGetUpgradeOptions": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetUpgradeOptionsResponse"
                },
                "examples": {
                  "ExampleGetUpgradeOptions": {
                    "value": {
                      "renewalOptions": [
                        {
                          "itemNumber": "UPGRADE-12346",
                          "lifecycleAction": "upgrade",
                          "description": "Upgrade to PLATINUM Membership for the remaining period",
                          "targetMembershipCode": "PLATINUM",
                          "periodStart": "2024-10-08",
                          "periodEnd": "2025-09-16",
                          "amount": 80,
                          "amountInclVat": 100,
                          "memberCardinality": 2,
                          "presentationOrder": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Upgrade Options"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/upgrade": {
      "post": {
        "description": "Use this endpoint to upgrade an active membership to a higher (or lower) plan or tier. The upgrade will **terminate the current membership period** and apply the new membership tier immediately. However, the **overall membership duration remains unchanged**. You must provide the `itemNumber` from the `getUpgradeOptions` endpoint, which includes the predefined details for the upgrade.",
        "operationId": "memberships_serviceLifecycle_upgradeMembership",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleUpgradeMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleUpgradeMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleUpgradeMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleUpgradeMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsConfirmMembershipUpgradeResponse"
                },
                "examples": {
                  "ExampleUpgradeMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 2332,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2024-10-07",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          },
                          {
                            "timeEntryId": 4554,
                            "validFromDate": "2024-10-08",
                            "validUntilDate": "2025-09-16",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "upgrade",
                            "itemNumber": "UPGRADE-12346",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R987654321",
                            "receiptLine": 10,
                            "membershipCode": "PLATINUM"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Upgrade Membership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsUpgradeMembershipRequest"
              },
              "examples": {
                "ExampleUpgradeMembership": {
                  "value": {
                    "renewWithItem": "UPGRADE-12346"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/extend/options": {
      "get": {
        "description": "Retrieve a list of available extension options for a membership. Each option is represented by an `itemNumber`, which includes predefined configurations such as new duration and pricing. The `itemNumber` returned from this endpoint can be used as a parameter in the `extendMembership` endpoint to apply the extension.",
        "operationId": "memberships_serviceLifecycle_getExtendOptions",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetExtendOptions": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetExtendOptions": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetExtendOptions": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleGetExtendOptions": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetExtendOptionsResponse"
                },
                "examples": {
                  "ExampleGetExtendOptions": {
                    "value": {
                      "extendOptions": [
                        {
                          "itemNumber": "EXTEND-12346",
                          "lifecycleAction": "extend",
                          "description": "Extend GOLD Membership with 1 year from today",
                          "targetMembershipCode": "GOLD",
                          "periodStart": "2024-10-08",
                          "periodEnd": "2025-10-07",
                          "amount": 80,
                          "amountInclVat": 100,
                          "memberCardinality": 2,
                          "presentationOrder": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Extend Options"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/extend": {
      "post": {
        "description": "Use this endpoint to extend the duration of an active membership. The extension will **terminate the current period** and create a **new period starting from today**, based on the provided extension configuration. The **overall membership duration will be greater** than the original duration. You must provide the `itemNumber` from the `getExtendOptions` endpoint to apply the extension.",
        "operationId": "memberships_serviceLifecycle_extendMembership",
        "tags": [
          "MembershipsServiceLifecycle"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleExtendMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleExtendMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleExtendMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleExtendMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsConfirmMembershipExtendResponse"
                },
                "examples": {
                  "ExampleExtendMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-10-07",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "entries": [
                          {
                            "timeEntryId": 2332,
                            "validFromDate": "2024-09-17",
                            "validUntilDate": "2024-10-07",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "new",
                            "itemNumber": "M12345",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R123456789",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          },
                          {
                            "timeEntryId": 4554,
                            "validFromDate": "2024-10-08",
                            "validUntilDate": "2025-10-07",
                            "activateOnFirstUse": false,
                            "lifecycleAction": "extend",
                            "itemNumber": "EXTEND-12346",
                            "amount": 80,
                            "amountInclVat": 100,
                            "receiptNumber": "R987654321",
                            "receiptLine": 10,
                            "membershipCode": "GOLD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Extend Membership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsExtendMembershipRequest"
              },
              "examples": {
                "ExampleExtendMembership": {
                  "value": {
                    "extendWithItem": "EXTEND-12346"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/{membershipId}/add": {
      "post": {
        "description": "Use this endpoint to add a new member to a membership. This is used when a new individual needs to be linked to an existing membership, either at the time of membership creation or later.",
        "operationId": "memberships_serviceMember_addMember",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleAddMember": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleAddMember": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleAddMember": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleAddMember": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsAddMemberResponse"
                },
                "examples": {
                  "ExampleAddMember": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": false,
                        "memberships": [
                          {
                            "role": "membership_admin",
                            "contactNumber": "C1234567890",
                            "membership": {
                              "membershipId": 1224,
                              "membershipNumber": "MS-DEMO-00152",
                              "communityCode": "RIVERLAND",
                              "membershipCode": "GOLD",
                              "issueDate": "2024-09-17",
                              "validFromDate": "2024-09-17",
                              "validUntilDate": "2025-09-16",
                              "customerNumber": "D000188",
                              "blocked": false,
                              "cards": [
                                {
                                  "cardId": 123434,
                                  "cardNumber": "MC1234567890",
                                  "expiryDate": "2029-09-17",
                                  "temporary": false
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Add Member",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsAddMemberRequest"
              },
              "examples": {
                "ExampleAddMember": {
                  "value": {
                    "membershipId": 1224,
                    "member": {
                      "firstName": "John",
                      "middleName": "A.",
                      "lastName": "Doe",
                      "address": "123 Main Street",
                      "postCode": "12345",
                      "city": "New York",
                      "country": "USA",
                      "birthday": "1980-01-01",
                      "gender": "male",
                      "newsletter": true,
                      "phoneNo": "+1234567890",
                      "email": "john.doe@acme.com",
                      "cards": [
                        {
                          "cardNumber": "MC1234567890",
                          "expiryDate": "2029-09-17",
                          "temporary": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/id/{memberId}": {
      "get": {
        "description": "Retrieve details of a specific member using their unique member ID.",
        "operationId": "memberships_serviceMember_getMemberId",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMember": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMember": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMember": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleGetMember": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMemberResponse"
                },
                "examples": {
                  "ExampleGetMember": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": false,
                        "memberships": [
                          {
                            "role": "membership_admin",
                            "contactNumber": "C1234567890",
                            "membership": {
                              "membershipId": 1224,
                              "membershipNumber": "MS-DEMO-00152",
                              "communityCode": "RIVERLAND",
                              "membershipCode": "GOLD",
                              "issueDate": "2024-09-17",
                              "validFromDate": "2024-09-17",
                              "validUntilDate": "2025-09-16",
                              "customerNumber": "D000188",
                              "blocked": false,
                              "cards": [
                                {
                                  "cardId": 123434,
                                  "cardNumber": "MC1234567890",
                                  "expiryDate": "2029-09-17",
                                  "temporary": false
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Id"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/number/{memberNumber}": {
      "get": {
        "description": "Use this endpoint to retrieve details of a member based on their member number. This is helpful when the member number is available but the member ID is not known.",
        "operationId": "memberships_serviceMember_getMemberNumber",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMemberNumber": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMemberNumber": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMemberNumber": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberNumber"
            },
            "example": "M123456789",
            "examples": {
              "ExampleGetMemberNumber": {
                "value": "M123456789"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMemberResponse"
                },
                "examples": {
                  "ExampleGetMemberNumber": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": false,
                        "memberships": [
                          {
                            "role": "membership_admin",
                            "contactNumber": "C1234567890",
                            "membership": {
                              "membershipId": 1224,
                              "membershipNumber": "MS-DEMO-00152",
                              "communityCode": "RIVERLAND",
                              "membershipCode": "GOLD",
                              "issueDate": "2024-09-17",
                              "validFromDate": "2024-09-17",
                              "validUntilDate": "2025-09-16",
                              "customerNumber": "D000188",
                              "blocked": false,
                              "cards": [
                                {
                                  "cardId": 123434,
                                  "cardNumber": "MC1234567890",
                                  "expiryDate": "2029-09-17",
                                  "temporary": false
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Number"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/{memberId}/block": {
      "post": {
        "description": "Block a specific member from further activity. This is typically used in scenarios where a member's access needs to be temporarily or permanently disabled. **Family Membership Downgrade** For family or group memberships, when the allowed number of valid members decreases (e.g., before a downgrade to a smaller membership plan), this endpoint can be used to block excess members to comply with the new membership limitations.",
        "operationId": "memberships_serviceMember_blockMember",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleBlockMember": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleBlockMember": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleBlockMember": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleBlockMember": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsBlockMemberResponse"
                },
                "examples": {
                  "ExampleBlockMember": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Block Member"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/{memberId}/unblock": {
      "post": {
        "description": "Unblock a previously blocked member, allowing them to resume activities associated with their membership. This endpoint re-enables access that was previously restricted.",
        "operationId": "memberships_serviceMember_unblockMember",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleUnblockMember": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleUnblockMember": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleUnblockMember": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleUnblockMember": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsUnblockMemberResponse"
                },
                "examples": {
                  "ExampleUnblockMember": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Unblock Member"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/{memberId}": {
      "put": {
        "description": "Update the details of an existing member. This endpoint is used when a member's information needs to be changed, such as updating their contact details, name, or personal information.",
        "operationId": "memberships_serviceMember_updateMember",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleUpdateMember": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleUpdateMember": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleUpdateMember": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleUpdateMember": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsUpdateMemberResponse"
                },
                "examples": {
                  "ExampleUpdateMember": {
                    "value": {
                      "member": {
                        "memberId": 4331,
                        "memberNumber": "M123456789",
                        "firstName": "John",
                        "middleName": "A.",
                        "lastName": "Doe",
                        "address": "123 Main Street",
                        "postCode": "12345",
                        "city": "New York",
                        "country": "USA",
                        "birthday": "1980-01-01",
                        "gender": "male",
                        "newsletter": true,
                        "phoneNo": "+1234567890",
                        "email": "john.doe@acme.com",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update Member",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsUpdateMemberRequest"
              },
              "examples": {
                "ExampleUpdateMember": {
                  "value": {
                    "member": {
                      "firstName": "John",
                      "middleName": "A.",
                      "lastName": "Doe",
                      "address": "123 Main Street",
                      "postCode": "12345",
                      "city": "New York",
                      "country": "USA",
                      "birthday": "1980-01-01",
                      "gender": "male",
                      "newsletter": true,
                      "phoneNo": "+1234567890",
                      "email": "john.doe@acme.com"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member/{memberId}/image": {
      "get": {
        "description": "Retrieve the image associated with a specific member.",
        "operationId": "memberships_serviceMember_getMemberImage",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMemberImage": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMemberImage": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMemberImage": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleGetMemberImage": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMemberImageResponse"
                },
                "examples": {
                  "ExampleGetMemberImage": {
                    "value": {
                      "image": "SGVsbG8gV29ybGQ="
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Member Image"
      },
      "put": {
        "description": "Create or update the image associated with a member. Use this endpoint to upload a new photo or update an existing one linked to the member’s profile.",
        "operationId": "memberships_serviceMember_setMemberImage",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleSetMemberImage": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleSetMemberImage": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleSetMemberImage": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberId"
            },
            "example": 4331,
            "examples": {
              "ExampleSetMemberImage": {
                "value": 4331
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsSetMemberImageResponse"
                },
                "examples": {
                  "ExampleSetMemberImage": {
                    "value": {
                      "mediaId": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Set Member Image",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsSetMemberImageRequest"
              },
              "examples": {
                "ExampleSetMemberImage": {
                  "value": {
                    "image": "SGVsbG8gV29ybGQ="
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/member": {
      "get": {
        "description": "Search for members based on various criteria such as name, birth date, email, phone number, or card number. This endpoint allows you to perform a flexible search and return a list of members that match the provided criteria.",
        "operationId": "memberships_serviceMember_findMembers",
        "tags": [
          "MembershipsServiceMember"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleFindMembers": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleFindMembers": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleFindMembers": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberNumber",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMemberNumber",
              "nullable": true
            },
            "example": "M123456789",
            "examples": {
              "ExampleFindMembers": {
                "value": "M123456789"
              }
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesLastName",
              "nullable": true
            },
            "example": "Doe",
            "examples": {
              "ExampleFindMembers": {
                "value": "Doe"
              }
            }
          },
          {
            "name": "birthDate",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesBirthday",
              "nullable": true
            },
            "example": "1980-01-01",
            "examples": {
              "ExampleFindMembers": {
                "value": "1980-01-01"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesEmail",
              "nullable": true
            },
            "example": "john.doe@acme.com",
            "examples": {
              "ExampleFindMembers": {
                "value": "john.doe@acme.com"
              }
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesPhoneNo",
              "nullable": true
            },
            "example": "+1234567890",
            "examples": {
              "ExampleFindMembers": {
                "value": "+1234567890"
              }
            }
          },
          {
            "name": "cardNumber",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesCardNumber",
              "nullable": true
            },
            "example": "MC1234567890",
            "examples": {
              "ExampleFindMembers": {
                "value": "MC1234567890"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesLimit",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesOffset",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMemberListResponse"
                },
                "examples": {
                  "ExampleFindMembers": {
                    "value": {
                      "members": [
                        {
                          "memberId": 4331,
                          "memberNumber": "M123456789",
                          "firstName": "John",
                          "middleName": "A.",
                          "lastName": "Doe",
                          "address": "123 Main Street",
                          "postCode": "12345",
                          "city": "New York",
                          "country": "USA",
                          "birthday": "1980-01-01",
                          "gender": "male",
                          "newsletter": true,
                          "phoneNo": "+1234567890",
                          "email": "john.doe@acme.com",
                          "blocked": false,
                          "memberships": [
                            {
                              "role": "membership_admin",
                              "contactNumber": "C1234567890",
                              "membership": {
                                "membershipId": 1224,
                                "membershipNumber": "MS-DEMO-00152",
                                "communityCode": "RIVERLAND",
                                "membershipCode": "GOLD",
                                "issueDate": "2024-09-17",
                                "validFromDate": "2024-09-17",
                                "validUntilDate": "2025-09-16",
                                "customerNumber": "D000188",
                                "blocked": false,
                                "cards": [
                                  {
                                    "cardId": 123434,
                                    "cardNumber": "MC1234567890",
                                    "expiryDate": "2029-09-17",
                                    "temporary": false
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Find Members"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership": {
      "post": {
        "description": "Use this endpoint to create a new membership.",
        "operationId": "memberships_serviceMembership_createMembership",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleMembership1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleMembership1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleMembership1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsCreateMembershipResponse"
                },
                "examples": {
                  "ExampleMembership1": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create Membership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membershipsCreateMembershipRequest"
              },
              "examples": {
                "ExampleMembership1": {
                  "value": {
                    "itemNumber": "M12345"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/id/{membershipId}": {
      "get": {
        "description": "This endpoint retrieves the details of a specific membership using its unique membership ID. It’s useful for checking the status, validity, and other details of an existing membership.",
        "operationId": "memberships_serviceMembership_getMembershipId",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMembershipId": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMembershipId": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMembershipId": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleGetMembershipId": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMembershipResponse"
                },
                "examples": {
                  "ExampleGetMembershipId": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Id"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/number/{membershipNumber}": {
      "get": {
        "description": "Use this endpoint to retrieve membership details based on the membership number. This is helpful when the ID isn't available but the membership number is known.",
        "operationId": "memberships_serviceMembership_getMembershipNumber",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleGetMembershipNumber": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleGetMembershipNumber": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleGetMembershipNumber": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipNumber"
            },
            "example": "MS-DEMO-00152",
            "examples": {
              "ExampleGetMembershipNumber": {
                "value": "MS-DEMO-00152"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMembershipResponse"
                },
                "examples": {
                  "ExampleGetMembershipNumber": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get using Number"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/block": {
      "post": {
        "description": "Use this endpoint to block a membership, preventing any further activity on it.",
        "operationId": "memberships_serviceMembership_blockMembership",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleBlockMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleBlockMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleBlockMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleBlockMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsBlockMembershipResponse"
                },
                "examples": {
                  "ExampleBlockMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Block Membership"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/unblock": {
      "post": {
        "description": "Unblock a previously blocked membership using this endpoint. It reactivates the membership, allowing members to resume activity after a block period.",
        "operationId": "memberships_serviceMembership_unblockMembership",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleUnblockMembership": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleUnblockMembership": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleUnblockMembership": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "ExampleUnblockMembership": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsUnblockMembershipResponse"
                },
                "examples": {
                  "ExampleUnblockMembership": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Unblock Membership"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/membership/{membershipId}/members": {
      "get": {
        "description": "This endpoint retrieves all members associated with a specific membership. It is useful you need to see a list of all participants or account holders under a single membership.",
        "operationId": "memberships_serviceMembership_getMembers",
        "tags": [
          "MembershipsServiceMembership"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "GetMembershipMembers": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "GetMembershipMembers": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "GetMembershipMembers": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/membershipstypesMembershipId"
            },
            "example": 1224,
            "examples": {
              "GetMembershipMembers": {
                "value": 1224
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsGetMembersResponse"
                },
                "examples": {
                  "GetMembershipMembers": {
                    "value": {
                      "membership": {
                        "membershipId": 1224,
                        "membershipNumber": "MS-DEMO-00152",
                        "communityCode": "RIVERLAND",
                        "membershipCode": "GOLD",
                        "issueDate": "2024-09-17",
                        "validFromDate": "2024-09-17",
                        "validUntilDate": "2025-09-16",
                        "customerNumber": "D000188",
                        "blocked": false,
                        "members": [
                          {
                            "role": "membership_admin",
                            "contactNumber": "C1234567890",
                            "member": {
                              "memberId": 4331,
                              "memberNumber": "M123456789",
                              "firstName": "John",
                              "middleName": "A.",
                              "lastName": "Doe",
                              "address": "123 Main Street",
                              "postCode": "12345",
                              "city": "New York",
                              "country": "USA",
                              "birthday": "1980-01-01",
                              "gender": "male",
                              "newsletter": true,
                              "phoneNo": "+1234567890",
                              "email": "john.doe@acme.com",
                              "blocked": false,
                              "cards": [
                                {
                                  "cardId": 123434,
                                  "cardNumber": "MC1234567890",
                                  "expiryDate": "2029-09-17",
                                  "temporary": false
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Members"
      }
    },
    "/{saasguid}/{saasenv}/{company}/memberships/misc/{identifier}/resolve": {
      "get": {
        "description": "Resolves number as a specific membership, member, or card",
        "operationId": "memberships_serviceMisc_resolveIdentifier",
        "tags": [
          "MembershipsServiceMisc"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleResolveIdentifier": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleResolveIdentifier": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleResolveIdentifier": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "MS-DEMO-00152",
            "examples": {
              "ExampleResolveIdentifier": {
                "value": "MS-DEMO-00152"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membershipsResolveMemberIdentifierResponse"
                },
                "examples": {
                  "ExampleResolveIdentifier": {
                    "value": {
                      "type": "membership",
                      "membershipId": 1224,
                      "memberId": 4331,
                      "cardId": 123434,
                      "membershipNumber": "MS-DEMO-00152",
                      "memberNumber": "M123456789",
                      "cardNumber": "MC1234567890"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Resolve Member Identifier"
      }
    },
    "/{saasguid}/{saasenv}/{company}/companies": {
      "get": {
        "description": "Get list of all companies in the selected environment. More information how to work with companies can be found [here](/api-reference/system-services/companies).",
        "operationId": "systemservices_companies_getCompanies",
        "tags": [
          "SystemservicesCompanies"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            }
          },
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemservicesCompanies"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "value": [
                        {
                          "id": "17ff1351-d07d-4b85-8957-b4b585f47aad",
                          "systemVersion": "24.0.16410.18056",
                          "name": "CRONUS International Ltd.",
                          "displayName": ""
                        },
                        {
                          "id": "872336d7-5183-4c0b-9b47-755f3d6d77e7",
                          "systemVersion": "24.0.16410.18056",
                          "name": "TestCompany",
                          "displayName": "TestCompany"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get all companies",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{saasguid}/{saasenv}/{company}/helloworld": {
      "get": {
        "description": "Hello World provides a simple, data-agnostic method to test the API connection, ensuring that your integration is set up correctly and functioning as expected.",
        "operationId": "systemservices_helloworld_getHelloWorld",
        "tags": [
          "SystemservicesHelloworld"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemservicesHelloWorld"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "message": "Hello World!"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Hello World",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/capacity/search": {
      "get": {
        "description": "Retrieve the capacity and availability for a ticket item number.",
        "operationId": "ticketing_serviceCapacity_getCapacity",
        "tags": [
          "TicketingServiceCapacity"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleCapacity1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleCapacity1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleCapacity1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "itemNumber",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingItemNumber"
            },
            "example": "31001",
            "examples": {
              "ExampleCapacity1": {
                "value": "31001"
              }
            }
          },
          {
            "name": "referenceDate",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ticketingReferenceDate",
              "nullable": true
            },
            "example": "2024-10-15",
            "examples": {
              "ExampleCapacity1": {
                "value": "2024-10-15"
              }
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ticketingNumberOfTickets",
              "nullable": true
            },
            "example": 2,
            "examples": {
              "ExampleCapacity1": {
                "value": 2
              }
            }
          },
          {
            "name": "admissionCode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ticketingAdmissionCode",
              "nullable": true
            }
          },
          {
            "name": "customerNumber",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ticketingCustomerNumber",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ticketingAdmissionCapacity"
                  }
                },
                "examples": {
                  "ExampleCapacity1": {
                    "value": [
                      {
                        "code": "CASTLE",
                        "default": true,
                        "included": "mandatory",
                        "referenceDate": "2024-10-15",
                        "quantity": 2,
                        "unitPrice": 100,
                        "discountPct": 0,
                        "unitPriceIncludesVat": true,
                        "vatPct": 25,
                        "schedules": [
                          {
                            "allocatable": true,
                            "allocationModel": "capacity",
                            "remainingCapacity": 10,
                            "explanation": "Schedule is allocatable",
                            "schedule": {
                              "id": 452,
                              "code": "MORNING",
                              "description": "Morning schedule",
                              "startDate": "2024-10-15",
                              "startTime": "09:00",
                              "endDate": "2024-10-15",
                              "endTime": "12:00",
                              "duration": "3 hours",
                              "arrivalFromTime": "08:30",
                              "arrivalUntilTime": "10:00"
                            },
                            "price": {
                              "pricingOption": "fixed",
                              "adjustmentAmount": 0,
                              "adjustmentPct": 0,
                              "adjustedUnitPrice": 100,
                              "adjustedTotalPrice": 200
                            },
                            "sales": {
                              "salesFromDate": "2024-10-11",
                              "salesFromTime": "00:00",
                              "salesUntilDate": "2024-10-17",
                              "salesUntilTime": "23:59"
                            }
                          },
                          {
                            "allocatable": true,
                            "allocationModel": "capacity",
                            "remainingCapacity": 12,
                            "explanation": "Schedule is allocatable",
                            "schedule": {
                              "id": 489,
                              "code": "EVENING",
                              "description": "Evening schedule",
                              "startDate": "2024-10-15",
                              "startTime": "17:00",
                              "endDate": "2024-10-15",
                              "endTime": "20:00",
                              "duration": "3 hours",
                              "arrivalFromTime": "16:30",
                              "arrivalUntilTime": "18:00"
                            },
                            "price": {
                              "pricingOption": "fixed",
                              "adjustmentAmount": 0,
                              "adjustmentPct": 0,
                              "adjustedUnitPrice": 100,
                              "adjustedTotalPrice": 200
                            },
                            "sales": {
                              "salesFromDate": "2024-10-11",
                              "salesFromTime": "00:00",
                              "salesUntilDate": "2024-10-17",
                              "salesUntilTime": "23:59"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/catalog/{storeCode}": {
      "get": {
        "description": "Get the list of ticket items and their descriptions",
        "operationId": "ticketing_serviceCatalog_getCatalog",
        "tags": [
          "TicketingServiceCatalog"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleCatalog1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleCatalog1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleCatalog1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "storeCode",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingStoreCode"
            },
            "example": "EN",
            "examples": {
              "ExampleCatalog1": {
                "value": "EN"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingStoreCatalogResponse"
                },
                "examples": {
                  "ExampleCatalog1": {
                    "value": {
                      "storeCode": "EN",
                      "items": [
                        {
                          "itemNumber": "31001",
                          "recommendedPrice": {
                            "unitPrice": 100,
                            "unitPriceIncludesVat": true,
                            "vatPct": 25,
                            "currencyCode": "SEK"
                          },
                          "ticketType": {
                            "code": "WEB",
                            "description": "Web sales",
                            "category": "Online"
                          },
                          "description": {
                            "title": "Castle Museum Entrance",
                            "subtitle": "Adult Castle Ticket",
                            "name": "Explore History",
                            "description": "<b>Access</b> to all castle exhibits",
                            "fullDescription": "<p>Step back in time and immerse yourself in the rich history of our castle museum.  Discover fascinating artifacts, explore grand halls, and learn about the lives of the people who once lived within these walls.</p> <p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p> <p>Join a guided tour to gain deeper insights into the castle's history and hear captivating stories  about its past. Learn about the battles fought, the royal inhabitants, and the secrets that lie hidden within these ancient walls.</p>"
                          },
                          "contents": [
                            {
                              "code": "CASTLE",
                              "description": {
                                "title": "Castle Museum Entrance",
                                "subtitle": "Adult Castle Ticket",
                                "name": "Explore the Castle",
                                "description": "<b>Access</b> to the castle exhibit",
                                "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                              },
                              "default": true,
                              "included": "mandatory",
                              "capacityControl": "sales",
                              "scheduleSelection": "noScheduleSelection",
                              "maxCapacity": 175
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Catalog"
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation": {
      "post": {
        "description": "Initiates a new reservation for tickets. Clients use this endpoint to provisionally hold tickets by specifying the desired items, quantities, and any specific admissions or schedules. Returns a token representing the reservation, along with its expiration time, allowing clients to manage or confirm the reservation before it expires.",
        "operationId": "ticketing_serviceReservations_createReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleCreateReservation1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleCreateReservation1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleCreateReservation1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingGetReservationDetails"
                },
                "examples": {
                  "ExampleCreateReservation1": {
                    "value": {
                      "token": "ABC123456DEF789GHI",
                      "expiresAt": "2024-10-11T12:13:00Z",
                      "reservationStatus": "registered",
                      "reservations": [
                        {
                          "itemNumber": "31001",
                          "quantity": 2,
                          "ticket": {
                            "validFrom": "2024-10-15T00:00:00Z",
                            "validUntil": "2024-10-15T23:59:59Z",
                            "unitPrice": 80,
                            "unitPriceInclVat": 100,
                            "currencyCode": "DKK"
                          },
                          "content": [
                            {
                              "admissionDetails": {
                                "code": "CASTLE",
                                "default": true,
                                "included": "mandatory",
                                "description": {
                                  "title": "Castle Museum Entrance",
                                  "subtitle": "Adult Castle Ticket",
                                  "name": "Explore the Castle",
                                  "description": "<b>Access</b> to the castle exhibit",
                                  "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                                },
                                "scheduleDetails": {
                                  "id": 452,
                                  "code": "MORNING",
                                  "description": "Morning schedule",
                                  "startDate": "2024-10-15",
                                  "startTime": "09:00",
                                  "endDate": "2024-10-15",
                                  "endTime": "12:00",
                                  "duration": "3 hours",
                                  "arrivalFromTime": "08:30",
                                  "arrivalUntilTime": "10:00"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingCreateReservationRequest"
              },
              "examples": {
                "ExampleCreateReservation1": {
                  "value": {
                    "reserve": [
                      {
                        "itemNumber": "31001",
                        "quantity": 2,
                        "content": [
                          {
                            "admissionCode": "CASTLE",
                            "scheduleId": 452
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation/{token}": {
      "put": {
        "description": "Modifies an existing reservation identified by a token. This endpoint replaces the current reservation details with new ones provided in the request, such as changing quantities or items. Useful for adjusting reservations before confirmation, ensuring that held tickets are updated and previous allocations are released.",
        "operationId": "ticketing_serviceReservations_updateReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "Example1": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingGetReservationDetails"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "token": "ABC123456DEF789GHI",
                      "expiresAt": "2024-10-11T12:13:00Z",
                      "reservationStatus": "registered",
                      "reservations": [
                        {
                          "itemNumber": "31001",
                          "quantity": 3,
                          "ticket": {
                            "validFrom": "2024-10-15T00:00:00Z",
                            "validUntil": "2024-10-15T23:59:59Z",
                            "unitPrice": 80,
                            "unitPriceInclVat": 100,
                            "currencyCode": "DKK"
                          },
                          "content": [
                            {
                              "admissionDetails": {
                                "code": "CASTLE",
                                "default": true,
                                "included": "mandatory",
                                "description": {
                                  "title": "Castle Museum Entrance",
                                  "subtitle": "Adult Castle Ticket",
                                  "name": "Explore the Castle",
                                  "description": "<b>Access</b> to the castle exhibit",
                                  "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                                },
                                "scheduleDetails": {
                                  "id": 452,
                                  "code": "MORNING",
                                  "description": "Morning schedule",
                                  "startDate": "2024-10-15",
                                  "startTime": "09:00",
                                  "endDate": "2024-10-15",
                                  "endTime": "12:00",
                                  "duration": "3 hours",
                                  "arrivalFromTime": "08:30",
                                  "arrivalUntilTime": "10:00"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingCreateReservationRequest"
              },
              "examples": {
                "Example1": {
                  "value": {
                    "reserve": [
                      {
                        "itemNumber": "31001",
                        "quantity": 3,
                        "content": [
                          {
                            "admissionCode": "CASTLE",
                            "scheduleId": 452
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the current details of an existing reservation using its token. This endpoint allows clients to check the status, contents, and expiration time of a reservation, whether it's registered or confirmed.",
        "operationId": "ticketing_serviceReservations_getReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              },
              "Example2": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              },
              "Example2": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              },
              "Example2": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "Example1": {
                "value": "ABC123456DEF789GHI"
              },
              "Example2": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingGetReservationDetails"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "token": "ABC123456DEF789GHI",
                      "expiresAt": "2024-10-11T12:13:00Z",
                      "reservationStatus": "registered",
                      "reservations": [
                        {
                          "itemNumber": "31001",
                          "quantity": 2,
                          "ticket": {
                            "validFrom": "2024-10-15T00:00:00Z",
                            "validUntil": "2024-10-15T23:59:59Z",
                            "unitPrice": 80,
                            "unitPriceInclVat": 100,
                            "currencyCode": "DKK"
                          },
                          "content": [
                            {
                              "admissionDetails": {
                                "code": "CASTLE",
                                "default": true,
                                "included": "mandatory",
                                "description": {
                                  "title": "Castle Museum Entrance",
                                  "subtitle": "Adult Castle Ticket",
                                  "name": "Explore the Castle",
                                  "description": "<b>Access</b> to the castle exhibit",
                                  "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                                },
                                "scheduleDetails": {
                                  "id": 452,
                                  "code": "MORNING",
                                  "description": "Morning schedule",
                                  "startDate": "2024-10-15",
                                  "startTime": "09:00",
                                  "endDate": "2024-10-15",
                                  "endTime": "12:00",
                                  "duration": "3 hours",
                                  "arrivalFromTime": "08:30",
                                  "arrivalUntilTime": "10:00"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Example2": {
                    "value": {
                      "token": "ABC123456DEF789GHI",
                      "expiresAt": "2024-10-11T12:13:00Z",
                      "reservationStatus": "confirmed",
                      "reservations": [
                        {
                          "itemNumber": "31001",
                          "quantity": 2,
                          "ticket": {
                            "ticketNumbers": [
                              "TICKET123",
                              "TICKET124"
                            ],
                            "validFrom": "2024-10-15T00:00:00Z",
                            "validUntil": "2024-10-15T23:59:59Z",
                            "pinCode": "12-34",
                            "unitPrice": 80,
                            "unitPriceInclVat": 100,
                            "currencyCode": "DKK",
                            "ticketHolder": "John Doe"
                          },
                          "content": [
                            {
                              "admissionDetails": {
                                "code": "CASTLE",
                                "default": true,
                                "included": "mandatory",
                                "description": {
                                  "title": "Castle Museum Entrance",
                                  "subtitle": "Adult Castle Ticket",
                                  "name": "Explore the Castle",
                                  "description": "<b>Access</b> to the castle exhibit",
                                  "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                                },
                                "scheduleDetails": {
                                  "id": 452,
                                  "code": "MORNING",
                                  "description": "Morning schedule",
                                  "startDate": "2024-10-15",
                                  "startTime": "09:00",
                                  "endDate": "2024-10-15",
                                  "endTime": "12:00",
                                  "duration": "3 hours",
                                  "arrivalFromTime": "08:30",
                                  "arrivalUntilTime": "10:00"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation/{token}/cancel": {
      "post": {
        "description": "Cancels an existing registered reservation using its token. This endpoint releases the held tickets back into the system, making them available for other customers. Note that confirmed reservations cannot be canceled using this endpoint; they must be revoked through a different process.",
        "operationId": "ticketing_serviceReservations_cancelReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "Example1": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingReservationActionResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "reservationStatus": "cancelled"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation/{token}/pre-confirm": {
      "post": {
        "description": "Extends the lifespan of a provisional reservation identified by a token. Clients use this endpoint to keep the reservation active for a longer period before confirming it, preventing the tickets from expiring and being released back into the system. This action is typically taken when you want to extend the reservation's lifespan just before starting the payment process.",
        "operationId": "ticketing_serviceReservations_preConfirmReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "Example1": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingReservationActionResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "expiresAt": "2024-10-11T12:13:00Z",
                      "reservationStatus": "registered"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation/{token}/confirm": {
      "post": {
        "description": "Finalizes a provisional reservation, turning it into a confirmed booking. This endpoint requires the reservation token and may include additional customer information such as ticket holder details and payment reference. Upon successful confirmation, the reservation status is updated, and ticket numbers are assigned.",
        "operationId": "ticketing_serviceReservations_confirmReservation",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "ExampleConfirmReservation1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "ExampleConfirmReservation1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "ExampleConfirmReservation1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "ExampleConfirmReservation1": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingGetReservationDetails"
                },
                "examples": {
                  "ExampleConfirmReservation1": {
                    "value": {
                      "token": "ABC123456DEF789GHI",
                      "reservationStatus": "confirmed",
                      "reservations": [
                        {
                          "itemNumber": "31001",
                          "quantity": 2,
                          "ticket": {
                            "ticketNumbers": [
                              "TICKET123",
                              "TICKET124"
                            ],
                            "validFrom": "2024-10-15T00:00:00Z",
                            "validUntil": "2024-10-15T23:59:59Z",
                            "pinCode": "12-34",
                            "unitPrice": 80,
                            "unitPriceInclVat": 100,
                            "currencyCode": "DKK",
                            "ticketHolder": "John Doe"
                          },
                          "content": [
                            {
                              "admissionDetails": {
                                "code": "CASTLE",
                                "default": true,
                                "included": "mandatory",
                                "description": {
                                  "title": "Castle Museum Entrance",
                                  "subtitle": "Adult Castle Ticket",
                                  "name": "Explore the Castle",
                                  "description": "<b>Access</b> to the castle exhibit",
                                  "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                                },
                                "scheduleDetails": {
                                  "id": 452,
                                  "code": "MORNING",
                                  "description": "Morning schedule",
                                  "startDate": "2024-10-15",
                                  "startTime": "09:00",
                                  "endDate": "2024-10-15",
                                  "endTime": "12:00",
                                  "duration": "3 hours",
                                  "arrivalFromTime": "08:30",
                                  "arrivalUntilTime": "10:00"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingConfirmReservationRequest"
              },
              "examples": {
                "ExampleConfirmReservation1": {
                  "value": {
                    "ticketHolder": "John Doe",
                    "notificationAddress": "john.doe@acme.com",
                    "paymentReference": "PAY123456"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/reservation/{token}/tickets": {
      "get": {
        "description": "Obtains the detailed ticket information for a confirmed reservation identified by its token. Clients use this endpoint to retrieve ticket details such as ticket numbers, validity periods, and any other pertinent information needed for ticket delivery or display.",
        "operationId": "ticketing_serviceReservations_getTickets",
        "tags": [
          "TicketingServiceReservations"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingToken"
            },
            "example": "ABC123456DEF789GHI",
            "examples": {
              "Example1": {
                "value": "ABC123456DEF789GHI"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ticketingTicketDetails"
                  }
                },
                "examples": {
                  "Example1": {
                    "value": [
                      {
                        "ticketNumber": "TICKET123",
                        "reservationToken": "ABC123456DEF789GHI",
                        "validFrom": "2024-10-15T00:00:00Z",
                        "validUntil": "2024-10-15T23:59:59Z",
                        "pinCode": "12-34",
                        "unitPrice": 80,
                        "unitPriceInclVat": 100,
                        "currencyCode": "DKK",
                        "ticketHolder": "John Doe",
                        "admissionDetails": [
                          {
                            "code": "CASTLE",
                            "default": true,
                            "included": "mandatory",
                            "description": {
                              "title": "Castle Museum Entrance",
                              "subtitle": "Adult Castle Ticket",
                              "name": "Explore the Castle",
                              "description": "<b>Access</b> to the castle exhibit",
                              "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                            },
                            "scheduleDetails": {
                              "id": 452,
                              "code": "MORNING",
                              "description": "Morning schedule",
                              "startDate": "2024-10-15",
                              "startTime": "09:00",
                              "endDate": "2024-10-15",
                              "endTime": "12:00",
                              "duration": "3 hours",
                              "arrivalFromTime": "08:30",
                              "arrivalUntilTime": "10:00"
                            }
                          }
                        ],
                        "description": {
                          "title": "Castle Museum Entrance",
                          "subtitle": "Adult Castle Ticket",
                          "name": "Explore History",
                          "description": "<b>Access</b> to all castle exhibits",
                          "fullDescription": "<p>Step back in time and immerse yourself in the rich history of our castle museum.  Discover fascinating artifacts, explore grand halls, and learn about the lives of the people who once lived within these walls.</p> <p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p> <p>Join a guided tour to gain deeper insights into the castle's history and hear captivating stories  about its past. Learn about the battles fought, the royal inhabitants, and the secrets that lie hidden within these ancient walls.</p>"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "Get Tickets"
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}": {
      "get": {
        "description": "Retrieves detailed information about a specific ticket using its unique ticketNumber. Clients use this endpoint to obtain ticket details such as validity periods, admissions, and any associated information after a reservation has been confirmed.",
        "operationId": "ticketing_serviceTicket_getTicket",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingTicketDetails"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "ticketNumber": "TICKET123",
                      "reservationToken": "ABC123456DEF789GHI",
                      "validFrom": "2024-10-15T00:00:00Z",
                      "validUntil": "2024-10-15T23:59:59Z",
                      "pinCode": "12-34",
                      "unitPrice": 80,
                      "unitPriceInclVat": 100,
                      "currencyCode": "DKK",
                      "ticketHolder": "John Doe",
                      "admissionDetails": [
                        {
                          "code": "CASTLE",
                          "default": true,
                          "included": "mandatory",
                          "description": {
                            "title": "Castle Museum Entrance",
                            "subtitle": "Adult Castle Ticket",
                            "name": "Explore the Castle",
                            "description": "<b>Access</b> to the castle exhibit",
                            "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                          },
                          "scheduleDetails": {
                            "id": 452,
                            "code": "MORNING",
                            "description": "Morning schedule",
                            "startDate": "2024-10-15",
                            "startTime": "09:00",
                            "endDate": "2024-10-15",
                            "endTime": "12:00",
                            "duration": "3 hours",
                            "arrivalFromTime": "08:30",
                            "arrivalUntilTime": "10:00"
                          }
                        }
                      ],
                      "description": {
                        "title": "Castle Museum Entrance",
                        "subtitle": "Adult Castle Ticket",
                        "name": "Explore History",
                        "description": "<b>Access</b> to all castle exhibits",
                        "fullDescription": "<p>Step back in time and immerse yourself in the rich history of our castle museum.  Discover fascinating artifacts, explore grand halls, and learn about the lives of the people who once lived within these walls.</p> <p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p> <p>Join a guided tour to gain deeper insights into the castle's history and hear captivating stories  about its past. Learn about the battles fought, the royal inhabitants, and the secrets that lie hidden within these ancient walls.</p>"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get Ticket"
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}/revoke": {
      "post": {
        "description": "Revokes a ticket identified by its ticketNumber, effectively canceling it after it has been confirmed. This action makes the ticket invalid for entry or use and releases any held resources. Useful for handling refunds or cancellations initiated by the customer or the system.",
        "operationId": "ticketing_serviceTicket_revokeTicket",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingRevokedResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "ticketNumber": "TICKET123",
                      "revoked": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}/validateArrival": {
      "post": {
        "description": "Validates a ticket for arrival at a specific admission point, marking the ticket as admitted. This endpoint is typically used at entry points (e.g., gates or doors) to verify the ticket's validity and record the customer's arrival. Optional parameters like admissionCode and scannerStation provide context for the validation.",
        "operationId": "ticketing_serviceTicket_validateArrival",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingAdmittedResponse",
                  "nullable": true
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "ticketNumber": "TICKET123",
                      "admitted": true
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingValidateTicketsRequest",
                "nullable": true
              },
              "examples": {
                "Example1": {
                  "value": {
                    "admissionCode": "CASTLE",
                    "scannerStation": "Entrance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}/validateDeparture": {
      "post": {
        "description": "Validates a ticket for departure from an admission, marking the ticket as departed. Used when tracking both entry and exit of customers, this endpoint helps manage capacities and ensures that the ticket is correctly processed upon leaving. Similar to arrival validation, it can include admissionCode and scannerStation.",
        "operationId": "ticketing_serviceTicket_validateDeparture",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingDepartedResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "ticketNumber": "TICKET123",
                      "departed": true
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingValidateTicketsRequest",
                "nullable": true
              },
              "examples": {
                "Example1": {
                  "value": {
                    "admissionCode": "CASTLE",
                    "scannerStation": "Exit"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{memberNumber}/validateMemberArrival": {
      "post": {
        "description": "Validates the arrival of a member using their member card number, possibly creating a reservation on-the-fly if necessary. This endpoint is used when members, such as season pass holders or VIPs, arrive at an admission point without a prior reservation. It ensures that their access is recorded and any tickets are generated accordingly.",
        "operationId": "ticketing_serviceTicket_validateMemberArrival",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "memberNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingMemberNumber"
            },
            "example": "MEMBER123",
            "examples": {
              "Example1": {
                "value": "MEMBER123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ticketingTicketDetails"
                  }
                },
                "examples": {
                  "Example1": {
                    "value": [
                      {
                        "ticketNumber": "TICKET123",
                        "reservationToken": "ABC123456DEF789GHI",
                        "validFrom": "2024-10-15T00:00:00Z",
                        "validUntil": "2024-10-15T23:59:59Z",
                        "pinCode": "12-34",
                        "ticketHolder": "John Doe",
                        "admissionDetails": [
                          {
                            "code": "CASTLE",
                            "default": true,
                            "included": "mandatory",
                            "description": {
                              "title": "Castle Museum Entrance",
                              "subtitle": "Adult Castle Ticket",
                              "name": "Explore the Castle",
                              "description": "<b>Access</b> to the castle exhibit",
                              "fullDescription": "<p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p>"
                            },
                            "scheduleDetails": {
                              "id": 452,
                              "code": "MORNING",
                              "description": "Morning schedule",
                              "startDate": "2024-10-15",
                              "startTime": "09:00",
                              "endDate": "2024-10-15",
                              "endTime": "12:00",
                              "duration": "3 hours",
                              "arrivalFromTime": "08:30",
                              "arrivalUntilTime": "10:00"
                            }
                          }
                        ],
                        "description": {
                          "title": "Castle Museum Entrance",
                          "subtitle": "Adult Castle Ticket",
                          "name": "Explore History",
                          "description": "<b>Access</b> to all castle exhibits",
                          "fullDescription": "<p>Step back in time and immerse yourself in the rich history of our castle museum.  Discover fascinating artifacts, explore grand halls, and learn about the lives of the people who once lived within these walls.</p> <p>Experience the grandeur of the castle's architecture and marvel at its intricate details.  Walk through beautifully decorated rooms and admire the stunning artwork and furniture on display.</p> <p>Join a guided tour to gain deeper insights into the castle's history and hear captivating stories  about its past. Learn about the battles fought, the royal inhabitants, and the secrets that lie hidden within these ancient walls.</p>"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingCreateMemberReservationRequest"
              },
              "examples": {
                "Example1": {
                  "value": {
                    "reserve": [
                      {
                        "itemNumber": "31001",
                        "quantity": 1
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}/sendToWallet": {
      "post": {
        "description": "Sends a confirmed ticket as an e-ticket (\"apple\" wallet) to the customer's email address or phone number specified in the request. This endpoint facilitates electronic delivery of tickets, allowing customers to receive and present their tickets digitally. Useful for post-purchase communications and ensuring customers have access to their tickets.",
        "operationId": "ticketing_serviceTicket_sendToWallet",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingTicketSentResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "ticketNumber": "TICKET123",
                      "ticketSent": true
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Send to Wallet",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingSendTicketRequest"
              },
              "examples": {
                "Example1": {
                  "value": {
                    "notificationAddress": "john@acme.com"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{saasguid}/{saasenv}/{company}/ticketing/ticket/{ticketNumber}/exchangeForCoupon": {
      "post": {
        "description": "Exchanges a ticket for a coupon, which can be used for discounts on future purchases. This endpoint is used when a customer opts to convert their ticket into a coupon, providing multiple value retention options. The ticket is validated, and a coupon is issued, providing value retention for the customer.",
        "operationId": "ticketing_serviceTicket_exchangeForCoupon",
        "tags": [
          "TicketingServiceTicket"
        ],
        "parameters": [
          {
            "name": "saasguid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasGuid"
            },
            "example": "01234567-89ab-cdef-0123-456789abcdef",
            "examples": {
              "Example1": {
                "value": "01234567-89ab-cdef-0123-456789abcdef"
              }
            }
          },
          {
            "name": "saasenv",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaasEnv"
            },
            "example": "production",
            "examples": {
              "Example1": {
                "value": "production"
              }
            }
          },
          {
            "name": "company",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Company"
            },
            "example": "CRONUS%20International%20Ltd.",
            "examples": {
              "Example1": {
                "value": "CRONUS%20International%20Ltd."
              }
            }
          },
          {
            "name": "ticketNumber",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "example": "TICKET123",
            "examples": {
              "Example1": {
                "value": "TICKET123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketingTicketCouponResponse"
                },
                "examples": {
                  "Example1": {
                    "value": {
                      "couponId": "COUPON123"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Exchange For Coupon",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketingGetTicketCouponRequest"
              },
              "examples": {
                "Example1": {
                  "value": {
                    "ticketNumber": "TICKET123",
                    "couponCode": "DISCOUNT10"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiVersionDate": {
        "title": "ApiVersionDate",
        "type": "string",
        "format": "date",
        "description": "The x-api-version header is to specify which version of the API a client wants to interact with. This allows the server to provide different responses or behaviors based on the version provided. Version is a date in the format \"YYYY-MM-DD\". When not specified, the latest version is assumed."
      },
      "SaasGuid": {
        "title": "SaasGuid",
        "type": "string",
        "description": "A unique identifier (GUID) for the Business Central tenant in the Software as a Service (SaaS) environment. [More details.](/url-paths#1-saasguid-saas-guid)"
      },
      "SaasEnv": {
        "title": "SaasEnv",
        "type": "string",
        "description": "Specifies which environment of the Business Central tenant you want to access. [More details.](/url-paths#2-saasenv-saas-environment)"
      },
      "Company": {
        "title": "Company",
        "type": "string",
        "description": "The name of the specific company within the chosen Business Central environment. [More details.](/url-paths#3-company)"
      },
      "membershipsAddCardRequest": {
        "title": "membershipsAddCardRequest",
        "type": "object",
        "description": "Request to add an additional member card",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber"
          },
          "expiryDate": {
            "$ref": "#/components/schemas/membershipstypesExpiryDate"
          }
        },
        "required": [
          "cardNumber",
          "expiryDate"
        ]
      },
      "membershipsAddCardResponse": {
        "title": "membershipsAddCardResponse",
        "type": "object",
        "description": "Response to adding an additional member card",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
          }
        },
        "required": [
          "card"
        ]
      },
      "membershipsReplaceCardRequest": {
        "title": "membershipsReplaceCardRequest",
        "type": "object",
        "description": "Request to add an additional member card",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber",
            "nullable": true
          },
          "expiryDate": {
            "$ref": "#/components/schemas/membershipstypesExpiryDate",
            "nullable": true
          }
        }
      },
      "membershipsReplaceCardResponse": {
        "title": "membershipsReplaceCardResponse",
        "type": "object",
        "description": "Response to adding an additional member card",
        "properties": {
          "card": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
            }
          }
        },
        "required": [
          "card"
        ]
      },
      "membershipsGetCardResponse": {
        "title": "membershipsGetCardResponse",
        "type": "object",
        "description": "Response to getting a card",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/membershipstypesMemberCardDTOResponse"
          }
        },
        "required": [
          "card"
        ]
      },
      "membershipsAdmissionCode": {
        "title": "membershipsAdmissionCode",
        "type": "string",
        "description": "A unique code that identifies a specific admission."
      },
      "membershipsTicketId": {
        "title": "membershipsTicketId",
        "type": "string",
        "description": "The unique identifier of a ticket"
      },
      "membershipsRegisterArrivalRequest": {
        "title": "membershipsRegisterArrivalRequest",
        "type": "object",
        "description": "Request to register a member's arrival",
        "properties": {
          "admissionCode": {
            "$ref": "#/components/schemas/membershipsAdmissionCode",
            "nullable": true
          }
        }
      },
      "membershipsRegisterArrivalResponse": {
        "title": "membershipsRegisterArrivalResponse",
        "type": "object",
        "description": "Response to registering a member's arrival",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber"
          },
          "ticketNumber": {
            "$ref": "#/components/schemas/membershipsTicketId"
          }
        },
        "required": [
          "cardNumber",
          "ticketNumber"
        ]
      },
      "membershipsSendWalletRequest": {
        "title": "membershipsSendWalletRequest",
        "type": "object",
        "description": "Request to send a card to the wallet",
        "properties": {
          "notificationAddress": {
            "$ref": "#/components/schemas/membershipstypesNotificationAddress"
          }
        },
        "required": [
          "notificationAddress"
        ]
      },
      "membershipsWalletSentResponse": {
        "title": "membershipsWalletSentResponse",
        "type": "object",
        "description": "Response to sending a card to the wallet",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber"
          },
          "cardSent": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "cardNumber",
          "cardSent"
        ]
      },
      "membershipsStoreCatalogResponse": {
        "title": "membershipsStoreCatalogResponse",
        "type": "object",
        "description": "Represents the catalog of membership items available at a specific store. Includes the store code and a list of items that customers can browse and purchase.",
        "properties": {
          "storeCode": {
            "$ref": "#/components/schemas/membershipstypesStoreCode"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMembershipItemCatalogDTO"
            },
            "nullable": true
          }
        },
        "required": [
          "storeCode"
        ]
      },
      "membershipsGetMembershipHistoryResponse": {
        "title": "membershipsGetMembershipHistoryResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsConfirmMembershipActivateResponse": {
        "title": "membershipsConfirmMembershipActivateResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsCancelMembershipRequest": {
        "title": "membershipsCancelMembershipRequest",
        "type": "object",
        "properties": {
          "cancelDate": {
            "$ref": "#/components/schemas/membershipstypesLifecycleDate"
          }
        },
        "required": [
          "cancelDate"
        ]
      },
      "membershipsConfirmMembershipCancelResponse": {
        "title": "membershipsConfirmMembershipCancelResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsRenewMembershipRequest": {
        "title": "membershipsRenewMembershipRequest",
        "type": "object",
        "properties": {
          "renewWithItem": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          }
        },
        "required": [
          "renewWithItem"
        ]
      },
      "membershipsConfirmMembershipRenewResponse": {
        "title": "membershipsConfirmMembershipRenewResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsGetRenewOptionsResponse": {
        "title": "membershipsGetRenewOptionsResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "renewalOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesLifecycleOptionDTO"
            }
          }
        },
        "required": [
          "renewalOptions"
        ]
      },
      "membershipsUpgradeMembershipRequest": {
        "title": "membershipsUpgradeMembershipRequest",
        "type": "object",
        "properties": {
          "renewWithItem": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          }
        },
        "required": [
          "renewWithItem"
        ]
      },
      "membershipsConfirmMembershipUpgradeResponse": {
        "title": "membershipsConfirmMembershipUpgradeResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsGetUpgradeOptionsResponse": {
        "title": "membershipsGetUpgradeOptionsResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "renewalOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesLifecycleOptionDTO"
            }
          }
        },
        "required": [
          "renewalOptions"
        ]
      },
      "membershipsExtendMembershipRequest": {
        "title": "membershipsExtendMembershipRequest",
        "type": "object",
        "properties": {
          "extendWithItem": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          }
        },
        "required": [
          "extendWithItem"
        ]
      },
      "membershipsConfirmMembershipExtendResponse": {
        "title": "membershipsConfirmMembershipExtendResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipLifecycleDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsGetExtendOptionsResponse": {
        "title": "membershipsGetExtendOptionsResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "extendOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesLifecycleOptionDTO"
            }
          }
        },
        "required": [
          "extendOptions"
        ]
      },
      "membershipsAddMemberRequest": {
        "title": "membershipsAddMemberRequest",
        "type": "object",
        "description": "Request to add a member to a membership",
        "properties": {
          "membershipId": {
            "$ref": "#/components/schemas/membershipstypesMembershipId"
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberWithCardDTORequest"
          }
        },
        "required": [
          "membershipId",
          "member"
        ]
      },
      "membershipsAddMemberResponse": {
        "title": "membershipsAddMemberResponse",
        "type": "object",
        "description": "Response to adding a member to a membership",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberDTO"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsGetMemberResponse": {
        "title": "membershipsGetMemberResponse",
        "type": "object",
        "description": "Response to retrieving a member",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberDTO"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsGetMemberListResponse": {
        "title": "membershipsGetMemberListResponse",
        "type": "object",
        "description": "Response to retrieving a member",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberDTO"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "membershipsGetMemberImageResponse": {
        "title": "membershipsGetMemberImageResponse",
        "type": "object",
        "description": "Response to retrieving a member image",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/membershipstypesBase64Image"
          }
        },
        "required": [
          "image"
        ]
      },
      "membershipsSetMemberImageRequest": {
        "title": "membershipsSetMemberImageRequest",
        "type": "object",
        "description": "Request to set a member image",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/membershipstypesBase64Image"
          }
        },
        "required": [
          "image"
        ]
      },
      "membershipsSetMemberImageResponse": {
        "title": "membershipsSetMemberImageResponse",
        "type": "object",
        "description": "Response to setting a member image",
        "properties": {
          "mediaId": {
            "$ref": "#/components/schemas/membershipstypesMediaId"
          }
        },
        "required": [
          "mediaId"
        ]
      },
      "membershipsBlockMemberResponse": {
        "title": "membershipsBlockMemberResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsUnblockMemberResponse": {
        "title": "membershipsUnblockMemberResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsUpdateMemberRequest": {
        "title": "membershipsUpdateMemberRequest",
        "type": "object",
        "description": "Request to update a member",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberEntityRequest"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsUpdateMemberResponse": {
        "title": "membershipsUpdateMemberResponse",
        "type": "object",
        "description": "Response to updating a member",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          }
        },
        "required": [
          "member"
        ]
      },
      "membershipsCreateMembershipRequest": {
        "title": "membershipsCreateMembershipRequest",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "itemNumber": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          },
          "activationDate": {
            "$ref": "#/components/schemas/membershipstypesActivationDate",
            "nullable": true
          },
          "companyName": {
            "$ref": "#/components/schemas/membershipstypesCompanyName",
            "nullable": true
          },
          "preassignedCustomerNumber": {
            "$ref": "#/components/schemas/membershipstypesPreassignedCustomerNumber",
            "nullable": true
          }
        },
        "required": [
          "itemNumber"
        ]
      },
      "membershipsCreateMembershipResponse": {
        "title": "membershipsCreateMembershipResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsGetMembershipResponse": {
        "title": "membershipsGetMembershipResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsBlockMembershipResponse": {
        "title": "membershipsBlockMembershipResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsUnblockMembershipResponse": {
        "title": "membershipsUnblockMembershipResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsGetMembersResponse": {
        "title": "membershipsGetMembersResponse",
        "type": "object",
        "properties": {
          "cacheInstanceId": {
            "$ref": "#/components/schemas/membershipstypesCacheInstanceId",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipDTO"
          }
        },
        "required": [
          "membership"
        ]
      },
      "membershipsResolveMemberIdentifierResponse": {
        "title": "membershipsResolveMemberIdentifierResponse",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/membershipstypesIdentifierType"
          },
          "membershipId": {
            "$ref": "#/components/schemas/membershipstypesMembershipId"
          },
          "memberId": {
            "$ref": "#/components/schemas/membershipstypesMemberId"
          },
          "cardId": {
            "$ref": "#/components/schemas/membershipstypesCardId"
          },
          "membershipNumber": {
            "$ref": "#/components/schemas/membershipstypesMembershipNumber"
          },
          "memberNumber": {
            "$ref": "#/components/schemas/membershipstypesMemberNumber"
          },
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber"
          }
        },
        "required": [
          "type",
          "membershipId",
          "memberId",
          "cardId",
          "membershipNumber",
          "memberNumber",
          "cardNumber"
        ]
      },
      "membershipstypesMembershipDTO": {
        "title": "membershipstypesMembershipDTO",
        "type": "object",
        "description": "This is a composite type representing a Membership and its associated Members. It extends the MembershipEntity and includes a list of members linked to the membership.",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberDTOWithinMembership"
            },
            "nullable": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        ]
      },
      "membershipstypesMemberDTOWithinMembership": {
        "title": "membershipstypesMemberDTOWithinMembership",
        "type": "object",
        "description": "This composite type describes the relationship between a Member and a Membership. It includes details about the member's role within the membership and the membership details.",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/membershipstypesRole"
          },
          "contactNumber": {
            "$ref": "#/components/schemas/membershipstypesContactNumber"
          },
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberWithCardDTOResponse"
          }
        },
        "required": [
          "role",
          "contactNumber",
          "member"
        ]
      },
      "membershipstypesMemberDTO": {
        "title": "membershipstypesMemberDTO",
        "type": "object",
        "description": "This is a composite type representing a Member and the Memberships they are associated with. It extends the MemberEntity and includes a list of memberships to which the member belongs.",
        "properties": {
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMembershipDTOWithinMember"
            },
            "nullable": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          }
        ]
      },
      "membershipstypesMembershipDTOWithinMember": {
        "title": "membershipstypesMembershipDTOWithinMember",
        "type": "object",
        "description": "This object is a composite type that describes the relationship between the MembershipEntity and the MemberEntity.",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/membershipstypesRole"
          },
          "contactNumber": {
            "$ref": "#/components/schemas/membershipstypesContactNumber"
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipToCardDTO"
          }
        },
        "required": [
          "role",
          "contactNumber",
          "membership"
        ]
      },
      "membershipstypesMemberCardDTOResponse": {
        "title": "membershipstypesMemberCardDTOResponse",
        "type": "object",
        "description": "This is a composite type representing a MemberCard along with the associated Member and Membership. It includes information about the member who holds the card and the membership the card is tied to.",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          },
          "membership": {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        },
        "required": [
          "member",
          "membership"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
          }
        ]
      },
      "membershipstypesMemberWithCardDTORequest": {
        "title": "membershipstypesMemberWithCardDTORequest",
        "type": "object",
        "description": "This is a request DTO used to create or update a Member along with their associated cards. It extends the MemberEntityRequest and optionally includes a list of cards for the member.",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
            },
            "nullable": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMemberEntityRequest"
          }
        ]
      },
      "membershipstypesMemberWithCardDTOResponse": {
        "title": "membershipstypesMemberWithCardDTOResponse",
        "type": "object",
        "description": "This is a response DTO representing a Member and their associated cards. It extends the MemberEntityResponse and includes a list of cards tied to the member.",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
            }
          }
        },
        "required": [
          "cards"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMemberEntityResponse"
          }
        ]
      },
      "membershipstypesMembershipToCardDTO": {
        "title": "membershipstypesMembershipToCardDTO",
        "type": "object",
        "description": "This composite type represents a Membership along with its associated Cards. It extends the MembershipEntity and includes a list of cards linked to members of the membership.",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMemberCardEntity"
            }
          }
        },
        "required": [
          "cards"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        ]
      },
      "membershipstypesMembershipEntity": {
        "title": "membershipstypesMembershipEntity",
        "type": "object",
        "description": "The MembershipEntity describes the basic attributes of a Membership.",
        "properties": {
          "membershipId": {
            "$ref": "#/components/schemas/membershipstypesMembershipId"
          },
          "membershipNumber": {
            "$ref": "#/components/schemas/membershipstypesMembershipNumber"
          },
          "communityCode": {
            "$ref": "#/components/schemas/membershipstypesCommunityCode"
          },
          "membershipCode": {
            "$ref": "#/components/schemas/membershipstypesMembershipCode"
          },
          "issueDate": {
            "$ref": "#/components/schemas/membershipstypesIssueDate"
          },
          "validFromDate": {
            "$ref": "#/components/schemas/membershipstypesValidFromDate",
            "nullable": true
          },
          "validUntilDate": {
            "$ref": "#/components/schemas/membershipstypesValidUntilDate",
            "nullable": true
          },
          "customerNumber": {
            "$ref": "#/components/schemas/membershipstypesCustomerNumber",
            "nullable": true
          },
          "documentId": {
            "$ref": "#/components/schemas/membershipstypesDocumentId",
            "nullable": true
          },
          "blocked": {
            "$ref": "#/components/schemas/membershipstypesBlocked"
          },
          "active": {
            "$ref": "#/components/schemas/membershipstypesActive",
            "nullable": true
          }
        },
        "required": [
          "membershipId",
          "membershipNumber",
          "communityCode",
          "membershipCode",
          "issueDate",
          "blocked"
        ]
      },
      "membershipstypesMemberEntityRequest": {
        "title": "membershipstypesMemberEntityRequest",
        "type": "object",
        "description": "The MemberEntityRequest defines the basic properties required to create or update a Member.",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/membershipstypesFirstName",
            "nullable": true
          },
          "middleName": {
            "$ref": "#/components/schemas/membershipstypesMiddleName",
            "nullable": true
          },
          "lastName": {
            "$ref": "#/components/schemas/membershipstypesLastName",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/membershipstypesAddress",
            "nullable": true
          },
          "postCode": {
            "$ref": "#/components/schemas/membershipstypesPostCode",
            "nullable": true
          },
          "city": {
            "$ref": "#/components/schemas/membershipstypesCity",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/membershipstypesCountry",
            "nullable": true
          },
          "birthday": {
            "$ref": "#/components/schemas/membershipstypesBirthday",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/membershipstypesGender",
            "nullable": true
          },
          "newsletter": {
            "$ref": "#/components/schemas/membershipstypesNewsletter",
            "nullable": true
          },
          "phoneNo": {
            "$ref": "#/components/schemas/membershipstypesPhoneNo",
            "nullable": true
          },
          "email": {
            "$ref": "#/components/schemas/membershipstypesEmail",
            "nullable": true
          }
        }
      },
      "membershipstypesMemberEntityResponse": {
        "title": "membershipstypesMemberEntityResponse",
        "type": "object",
        "description": "The MemberEntityResponse extends the MemberEntityRequest and includes additional properties such as the member's ID, membership number, and blocked status. This DTO is used when returning a member's details.",
        "properties": {
          "memberId": {
            "$ref": "#/components/schemas/membershipstypesMemberId"
          },
          "memberNumber": {
            "$ref": "#/components/schemas/membershipstypesMemberNumber"
          },
          "blocked": {
            "$ref": "#/components/schemas/membershipstypesBlocked"
          }
        },
        "required": [
          "memberId",
          "memberNumber",
          "blocked"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMemberEntityRequest"
          }
        ]
      },
      "membershipstypesMemberCardEntity": {
        "title": "membershipstypesMemberCardEntity",
        "type": "object",
        "description": "The MemberCardEntity describes the attributes of a card linked to a Member. It is used within other composite DTOs to represent the cards associated with a member or membership.",
        "properties": {
          "cardId": {
            "$ref": "#/components/schemas/membershipstypesCardId",
            "nullable": true
          },
          "cardNumber": {
            "$ref": "#/components/schemas/membershipstypesCardNumber"
          },
          "expiryDate": {
            "$ref": "#/components/schemas/membershipstypesExpiryDate"
          },
          "temporary": {
            "$ref": "#/components/schemas/membershipstypesTemporaryCard"
          },
          "blocked": {
            "$ref": "#/components/schemas/membershipstypesBlocked",
            "nullable": true
          }
        },
        "required": [
          "cardNumber",
          "expiryDate",
          "temporary"
        ]
      },
      "membershipstypesMembershipLifecycleDTO": {
        "title": "membershipstypesMembershipLifecycleDTO",
        "type": "object",
        "description": "The MembershipLifecycleDTO is a composite type representing the timeline of a membership. It includes details when the membership was activated, renewed, upgraded, or extended.",
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesMembershipTimeEntryEntity"
            }
          }
        },
        "required": [
          "entries"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/membershipstypesMembershipEntity"
          }
        ]
      },
      "membershipstypesMembershipTimeEntryEntity": {
        "title": "membershipstypesMembershipTimeEntryEntity",
        "type": "object",
        "description": "The MembershipTimeEntryEntity describes the attributes of a time entry linked to a Membership. It is used within other composite DTOs to represent the validity associated with a membership.",
        "properties": {
          "timeEntryId": {
            "$ref": "#/components/schemas/membershipstypesTimeEntryId"
          },
          "validFromDate": {
            "$ref": "#/components/schemas/membershipstypesValidFromDate"
          },
          "validUntilDate": {
            "$ref": "#/components/schemas/membershipstypesValidUntilDate"
          },
          "activateOnFirstUse": {
            "$ref": "#/components/schemas/membershipstypesActivateOnFirstUse"
          },
          "lifecycleAction": {
            "$ref": "#/components/schemas/membershipstypesLifecycleAction"
          },
          "itemNumber": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          },
          "amount": {
            "$ref": "#/components/schemas/membershipstypesAmount"
          },
          "amountInclVat": {
            "$ref": "#/components/schemas/membershipstypesAmountInclVat"
          },
          "receiptNumber": {
            "$ref": "#/components/schemas/membershipstypesReceiptNumber"
          },
          "receiptLine": {
            "$ref": "#/components/schemas/membershipstypesReceiptLine"
          },
          "membershipCode": {
            "$ref": "#/components/schemas/membershipstypesMembershipCode"
          }
        },
        "required": [
          "timeEntryId",
          "validFromDate",
          "validUntilDate",
          "activateOnFirstUse",
          "lifecycleAction",
          "itemNumber",
          "amount",
          "amountInclVat",
          "receiptNumber",
          "receiptLine",
          "membershipCode"
        ]
      },
      "membershipstypesLifecycleOptionDTO": {
        "title": "membershipstypesLifecycleOptionDTO",
        "type": "object",
        "description": "This composite type represents an item used to facilitate the renewal of a membership. It includes details such as the item number, renewal period, and pricing.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          },
          "lifecycleAction": {
            "$ref": "#/components/schemas/membershipstypesLifecycleAction"
          },
          "description": {
            "type": "string",
            "example": "Renew GOLD Membership for 1 year"
          },
          "targetMembershipCode": {
            "$ref": "#/components/schemas/membershipstypesMembershipCode"
          },
          "periodStart": {
            "$ref": "#/components/schemas/membershipstypesPeriodStart"
          },
          "periodEnd": {
            "$ref": "#/components/schemas/membershipstypesPeriodEnd"
          },
          "amount": {
            "$ref": "#/components/schemas/membershipstypesAmount"
          },
          "amountInclVat": {
            "$ref": "#/components/schemas/membershipstypesAmountInclVat"
          },
          "memberCardinality": {
            "type": "integer",
            "example": 2
          },
          "presentationOrder": {
            "type": "integer",
            "example": 0
          }
        },
        "required": [
          "itemNumber",
          "lifecycleAction",
          "description",
          "targetMembershipCode",
          "periodStart",
          "periodEnd",
          "amount",
          "amountInclVat",
          "memberCardinality",
          "presentationOrder"
        ]
      },
      "membershipstypesMembershipItemCatalogDTO": {
        "title": "membershipstypesMembershipItemCatalogDTO",
        "type": "object",
        "description": "Describes a membership item available for sale, including its unique identifier, pricing, type, and descriptions, Used to present detailed membership options to customers.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/membershipstypesItemNumber"
          },
          "type": {
            "$ref": "#/components/schemas/membershipstypesItemMemberType"
          },
          "recommendedPrice": {
            "$ref": "#/components/schemas/membershipstypesAmountInclVat"
          },
          "membershipCode": {
            "$ref": "#/components/schemas/membershipstypesMembershipCode"
          },
          "itemDescription": {
            "$ref": "#/components/schemas/membershipstypesDescription"
          },
          "shortDescription": {
            "$ref": "#/components/schemas/membershipstypesDescription"
          },
          "fullDescription": {
            "$ref": "#/components/schemas/membershipstypesDescription"
          }
        },
        "required": [
          "itemNumber",
          "type",
          "recommendedPrice",
          "membershipCode",
          "itemDescription",
          "shortDescription",
          "fullDescription"
        ]
      },
      "membershipstypesCommunityCode": {
        "title": "membershipstypesCommunityCode",
        "type": "string",
        "description": "Code representing the community associated with the membership."
      },
      "membershipstypesMembershipCode": {
        "title": "membershipstypesMembershipCode",
        "type": "string",
        "description": "Code representing the type of membership."
      },
      "membershipstypesDescription": {
        "title": "membershipstypesDescription",
        "type": "string",
        "description": "Description of the membership item."
      },
      "membershipstypesCacheInstanceId": {
        "title": "membershipstypesCacheInstanceId",
        "type": "string",
        "description": "Identifier for the NST instance. Providing this value will increase the performance of the API when the NST is load-balanced."
      },
      "membershipstypesItemNumber": {
        "title": "membershipstypesItemNumber",
        "type": "string",
        "description": "Unique identifier for an item."
      },
      "membershipstypesMembershipId": {
        "title": "membershipstypesMembershipId",
        "type": "integer",
        "description": "Unique identifier for a membership."
      },
      "membershipstypesMembershipNumber": {
        "title": "membershipstypesMembershipNumber",
        "type": "string",
        "description": "Unique membership number."
      },
      "membershipstypesCustomerNumber": {
        "title": "membershipstypesCustomerNumber",
        "type": "string",
        "description": "Customer number associated with the membership."
      },
      "membershipstypesActivationDate": {
        "title": "membershipstypesActivationDate",
        "type": "string",
        "format": "date",
        "description": "The date from which the membership should be active. Setup can dictated and override this date."
      },
      "membershipstypesCompanyName": {
        "title": "membershipstypesCompanyName",
        "type": "string",
        "description": "The name of the company associated with the membership."
      },
      "membershipstypesPreassignedCustomerNumber": {
        "title": "membershipstypesPreassignedCustomerNumber",
        "type": "string",
        "description": "A preassigned customer number for the membership. When there is no customer number, the system will generate one."
      },
      "membershipstypesIssueDate": {
        "title": "membershipstypesIssueDate",
        "type": "string",
        "format": "date",
        "description": "The date the membership was issued."
      },
      "membershipstypesValidFromDate": {
        "title": "membershipstypesValidFromDate",
        "type": "string",
        "format": "date",
        "description": "The date the membership starts being valid."
      },
      "membershipstypesValidUntilDate": {
        "title": "membershipstypesValidUntilDate",
        "type": "string",
        "format": "date",
        "description": "The date the membership expires."
      },
      "membershipstypesTimeEntryId": {
        "title": "membershipstypesTimeEntryId",
        "type": "integer",
        "description": "Unique identifier for a time entry."
      },
      "membershipstypesLifecycleActionEnum": {
        "title": "membershipstypesLifecycleActionEnum",
        "type": "string",
        "enum": [
          "new",
          "renew",
          "upgrade",
          "extend",
          "auto_renew"
        ]
      },
      "membershipstypesLifecycleAction": {
        "title": "membershipstypesLifecycleAction",
        "$ref": "#/components/schemas/membershipstypesLifecycleActionEnum",
        "description": "The lifecycle action for the membership."
      },
      "membershipstypesLifecycleDate": {
        "title": "membershipstypesLifecycleDate",
        "type": "string",
        "format": "date",
        "description": "The lifecycle dates for the membership."
      },
      "membershipstypesPeriodStart": {
        "title": "membershipstypesPeriodStart",
        "type": "string",
        "format": "date",
        "description": "The start date for option."
      },
      "membershipstypesPeriodEnd": {
        "title": "membershipstypesPeriodEnd",
        "type": "string",
        "format": "date",
        "description": "The end date for the option."
      },
      "membershipstypesAmount": {
        "title": "membershipstypesAmount",
        "type": "number",
        "format": "double",
        "description": "The amount associated with the membership."
      },
      "membershipstypesAmountInclVat": {
        "title": "membershipstypesAmountInclVat",
        "type": "number",
        "format": "double",
        "description": "The amount including VAT associated with the membership."
      },
      "membershipstypesReceiptNumber": {
        "title": "membershipstypesReceiptNumber",
        "type": "string",
        "description": "The receipt number associated with the sale."
      },
      "membershipstypesReceiptLine": {
        "title": "membershipstypesReceiptLine",
        "type": "integer",
        "description": "The receipt line number associated with the sale."
      },
      "membershipstypesMemberId": {
        "title": "membershipstypesMemberId",
        "type": "integer",
        "description": "Unique identifier for a member."
      },
      "membershipstypesContactNumber": {
        "title": "membershipstypesContactNumber",
        "type": "string",
        "description": "The contact number for the member."
      },
      "membershipstypesMemberNumber": {
        "title": "membershipstypesMemberNumber",
        "type": "string",
        "description": "Unique number identifying the member."
      },
      "membershipstypesFirstName": {
        "title": "membershipstypesFirstName",
        "type": "string",
        "description": "The first name of the member."
      },
      "membershipstypesMiddleName": {
        "title": "membershipstypesMiddleName",
        "type": "string",
        "description": "The middle name of the member."
      },
      "membershipstypesLastName": {
        "title": "membershipstypesLastName",
        "type": "string",
        "description": "The last name of the member."
      },
      "membershipstypesAddress": {
        "title": "membershipstypesAddress",
        "type": "string",
        "description": "The address of the member."
      },
      "membershipstypesPostCode": {
        "title": "membershipstypesPostCode",
        "type": "string",
        "description": "The postal code of the member's address."
      },
      "membershipstypesCity": {
        "title": "membershipstypesCity",
        "type": "string",
        "description": "The city where the member resides."
      },
      "membershipstypesCountry": {
        "title": "membershipstypesCountry",
        "type": "string",
        "description": "The country where the member resides."
      },
      "membershipstypesBirthday": {
        "title": "membershipstypesBirthday",
        "type": "string",
        "format": "date",
        "description": "The birth date of the member."
      },
      "membershipstypesGenderEnum": {
        "title": "membershipstypesGenderEnum",
        "type": "string",
        "enum": [
          "not_specified",
          "female",
          "male",
          "other"
        ]
      },
      "membershipstypesGender": {
        "title": "membershipstypesGender",
        "$ref": "#/components/schemas/membershipstypesGenderEnum",
        "description": "The gender of the member."
      },
      "membershipstypesNewsletter": {
        "title": "membershipstypesNewsletter",
        "type": "boolean",
        "description": "Indicates whether the member is subscribed to the newsletter."
      },
      "membershipstypesPhoneNo": {
        "title": "membershipstypesPhoneNo",
        "type": "string",
        "description": "The phone number of the member."
      },
      "membershipstypesEmail": {
        "title": "membershipstypesEmail",
        "type": "string",
        "description": "The email address of the member."
      },
      "membershipstypesBase64Image": {
        "title": "membershipstypesBase64Image",
        "type": "string",
        "format": "byte",
        "description": "Base64 encoded image of the member."
      },
      "membershipstypesGDPRApprovalEnum": {
        "title": "membershipstypesGDPRApprovalEnum",
        "type": "string",
        "enum": [
          "pending",
          "accepted",
          "rejected",
          "delegated"
        ]
      },
      "membershipstypesGDPRApproval": {
        "title": "membershipstypesGDPRApproval",
        "type": "boolean",
        "description": "Indicates if the member has given GDPR approval."
      },
      "membershipstypesNotificationMethod": {
        "title": "membershipstypesNotificationMethod",
        "type": "string",
        "description": "The preferred notification method for the member."
      },
      "membershipstypesNotificationAddress": {
        "title": "membershipstypesNotificationAddress",
        "type": "string",
        "description": "The email address or mobile phone number to send cards and notifications to"
      },
      "membershipstypesCardId": {
        "title": "membershipstypesCardId",
        "type": "integer",
        "description": "Unique identifier for a card."
      },
      "membershipstypesCardNumber": {
        "title": "membershipstypesCardNumber",
        "type": "string",
        "description": "Unique identifier for a card."
      },
      "membershipstypesExpiryDate": {
        "title": "membershipstypesExpiryDate",
        "type": "string",
        "format": "date",
        "description": "The expiry date of the card."
      },
      "membershipstypesTemporaryCard": {
        "title": "membershipstypesTemporaryCard",
        "type": "boolean",
        "description": "Indicates whether the card is temporary."
      },
      "membershipstypesRoleEnum": {
        "title": "membershipstypesRoleEnum",
        "type": "string",
        "enum": [
          "membership_admin",
          "member",
          "guardian",
          "dependant"
        ]
      },
      "membershipstypesRole": {
        "title": "membershipstypesRole",
        "$ref": "#/components/schemas/membershipstypesRoleEnum",
        "description": "The role of the member."
      },
      "membershipstypesDocumentId": {
        "title": "membershipstypesDocumentId",
        "type": "string",
        "description": "Unique identifier for the membership document."
      },
      "membershipstypesMediaId": {
        "title": "membershipstypesMediaId",
        "type": "string",
        "format": "uuid",
        "description": "Unique identifier for the media."
      },
      "membershipstypesCreatedAt": {
        "title": "membershipstypesCreatedAt",
        "type": "string",
        "format": "date-time",
        "description": "Date and time when the membership period was created."
      },
      "membershipstypesContext": {
        "title": "membershipstypesContext",
        "type": "string",
        "description": "Context name associated with the membership period."
      },
      "membershipstypesBlocked": {
        "title": "membershipstypesBlocked",
        "type": "boolean",
        "description": "Indicates whether the membership period is blocked."
      },
      "membershipstypesActive": {
        "title": "membershipstypesActive",
        "type": "boolean",
        "description": "Indicates whether the membership period is active."
      },
      "membershipstypesActivateOnFirstUse": {
        "title": "membershipstypesActivateOnFirstUse",
        "type": "boolean",
        "description": "Specifies if the membership will activate upon first use."
      },
      "membershipstypesProductId": {
        "title": "membershipstypesProductId",
        "type": "string",
        "description": "Identifier for the product associated with the membership period."
      },
      "membershipstypesLoyaltyProgram": {
        "title": "membershipstypesLoyaltyProgram",
        "type": "string",
        "description": "Name of the loyalty program associated with the membership."
      },
      "membershipstypesMemberCardinality": {
        "title": "membershipstypesMemberCardinality",
        "type": "integer",
        "description": "Cardinality of the member in the membership."
      },
      "membershipstypesMemberCount": {
        "title": "membershipstypesMemberCount",
        "type": "object",
        "properties": {
          "named": {
            "type": "integer"
          },
          "anonymous": {
            "type": "integer"
          }
        },
        "required": [
          "named",
          "anonymous"
        ]
      },
      "membershipstypesAttributeCode": {
        "title": "membershipstypesAttributeCode",
        "type": "string",
        "description": "Code representing the specific attribute."
      },
      "membershipstypesAttributeName": {
        "title": "membershipstypesAttributeName",
        "type": "string",
        "description": "Name of the attribute."
      },
      "membershipstypesAttributeValue": {
        "title": "membershipstypesAttributeValue",
        "type": "string",
        "description": "Value assigned to the attribute."
      },
      "membershipstypesAttribute": {
        "title": "membershipstypesAttribute",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/membershipstypesAttributeCode"
          },
          "name": {
            "$ref": "#/components/schemas/membershipstypesAttributeName"
          },
          "value": {
            "$ref": "#/components/schemas/membershipstypesAttributeValue"
          }
        },
        "required": [
          "code",
          "name",
          "value"
        ]
      },
      "membershipstypesAttributes": {
        "title": "membershipstypesAttributes",
        "type": "object",
        "properties": {
          "attribute": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesAttribute"
            }
          }
        },
        "required": [
          "attribute"
        ]
      },
      "membershipstypesRequestFieldUpdate": {
        "title": "membershipstypesRequestFieldUpdate",
        "type": "object",
        "properties": {
          "field": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/membershipstypesField"
            }
          }
        },
        "required": [
          "field"
        ]
      },
      "membershipstypesField": {
        "title": "membershipstypesField",
        "type": "object",
        "properties": {
          "entryNo": {
            "$ref": "#/components/schemas/membershipstypesFieldEntryNo"
          }
        },
        "required": [
          "entryNo"
        ]
      },
      "membershipstypesFieldEntryNo": {
        "title": "membershipstypesFieldEntryNo",
        "type": "integer",
        "description": "Number representing the specific field id to update."
      },
      "membershipstypesLimit": {
        "title": "membershipstypesLimit",
        "type": "integer",
        "description": "The maximum number of results to return."
      },
      "membershipstypesOffset": {
        "title": "membershipstypesOffset",
        "type": "integer",
        "description": "The starting point for results, used for pagination."
      },
      "membershipstypesIdentifierTypeEnum": {
        "title": "membershipstypesIdentifierTypeEnum",
        "type": "string",
        "enum": [
          "membership",
          "member",
          "card"
        ]
      },
      "membershipstypesIdentifierType": {
        "title": "membershipstypesIdentifierType",
        "$ref": "#/components/schemas/membershipstypesIdentifierTypeEnum",
        "description": "The type of identifier"
      },
      "membershipstypesStoreCode": {
        "title": "membershipstypesStoreCode",
        "type": "string",
        "description": "A unique identifier for a store - a logical grouping defining a subset of membership items. This is used to filter the list of membership related items returned by the API."
      },
      "membershipstypesItemMemberTypeEnum": {
        "title": "membershipstypesItemMemberTypeEnum",
        "type": "string",
        "enum": [
          "new_membership",
          "add_member",
          "add_card",
          "replace_card"
        ]
      },
      "membershipstypesItemMemberType": {
        "title": "membershipstypesItemMemberType",
        "type": "string",
        "description": "Type of membership item."
      },
      "systemservicesCompanyResponse": {
        "title": "systemservicesCompanyResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "systemVersion": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "systemVersion",
          "name",
          "displayName"
        ]
      },
      "systemservicesCompanies": {
        "title": "systemservicesCompanies",
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemservicesCompanyResponse"
            }
          }
        },
        "required": [
          "value"
        ]
      },
      "systemservicesHelloWorld": {
        "title": "systemservicesHelloWorld",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Hello World!"
          }
        },
        "required": [
          "message"
        ]
      },
      "ticketingAdmissionCapacity": {
        "title": "ticketingAdmissionCapacity",
        "type": "object",
        "description": "Provides detailed capacity and availability information for a specific admission associated with a ticket item. Includes pricing, quantity, and schedule details to help determine if the desired number of tickets can be reserved on a particular date.",
        "properties": {
          "customerNumber": {
            "$ref": "#/components/schemas/ticketingCustomerNumber",
            "nullable": true
          },
          "referenceDate": {
            "$ref": "#/components/schemas/ticketingReferenceDate"
          },
          "quantity": {
            "$ref": "#/components/schemas/ticketingNumberOfTickets"
          },
          "unitPrice": {
            "$ref": "#/components/schemas/ticketingUnitPrice"
          },
          "discountPct": {
            "$ref": "#/components/schemas/ticketingDiscountPct"
          },
          "unitPriceIncludesVat": {
            "$ref": "#/components/schemas/ticketingUnitPriceIncludesVat"
          },
          "vatPct": {
            "$ref": "#/components/schemas/ticketingVatPct"
          },
          "schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingSchedule"
            }
          }
        },
        "required": [
          "referenceDate",
          "quantity",
          "unitPrice",
          "discountPct",
          "unitPriceIncludesVat",
          "vatPct",
          "schedules"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ticketingAdmissionBase"
          }
        ]
      },
      "ticketingAdmissionSearch": {
        "title": "ticketingAdmissionSearch",
        "type": "object",
        "description": "Represents the criteria used to search for capacity information for an admission. Used in requests to specify the ticket item, date, quantity, and optionally filter by admission code or customer number.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/ticketingItemNumber"
          },
          "referenceDate": {
            "$ref": "#/components/schemas/ticketingReferenceDate",
            "nullable": true
          },
          "quantity": {
            "$ref": "#/components/schemas/ticketingNumberOfTickets",
            "nullable": true
          },
          "admissionCode": {
            "$ref": "#/components/schemas/ticketingAdmissionCode",
            "nullable": true
          },
          "customerNumber": {
            "$ref": "#/components/schemas/ticketingCustomerNumber",
            "nullable": true
          }
        },
        "required": [
          "itemNumber"
        ]
      },
      "ticketingSchedule": {
        "title": "ticketingSchedule",
        "type": "object",
        "description": "Contains information about a specific schedule or time slot for an admission, including whether it can be allocated (reserved), remaining capacity, pricing adjustments, and sales periods. Helps clients identify available schedules and understand any limitations or special pricing.",
        "properties": {
          "allocatable": {
            "$ref": "#/components/schemas/ticketingAllocatable"
          },
          "allocationModel": {
            "$ref": "#/components/schemas/ticketingAllocationModel"
          },
          "remainingCapacity": {
            "$ref": "#/components/schemas/ticketingRemainingCapacity"
          },
          "explanation": {
            "$ref": "#/components/schemas/ticketingAllocationExplanation"
          },
          "schedule": {
            "$ref": "#/components/schemas/ticketingScheduleDetails"
          },
          "price": {
            "$ref": "#/components/schemas/ticketingSchedulePrice"
          },
          "sales": {
            "$ref": "#/components/schemas/ticketingScheduleSales"
          }
        },
        "required": [
          "allocatable",
          "allocationModel",
          "remainingCapacity",
          "explanation",
          "schedule",
          "price",
          "sales"
        ]
      },
      "ticketingSchedulePrice": {
        "title": "ticketingSchedulePrice",
        "type": "object",
        "description": "Details pricing adjustments applied to an admission's base price for a specific schedule. Includes information on dynamic pricing options, adjustment amounts or percentages, and calculates the adjusted unit and total prices for the reservation.",
        "properties": {
          "pricingOption": {
            "$ref": "#/components/schemas/ticketingPricingOption"
          },
          "adjustmentAmount": {
            "$ref": "#/components/schemas/ticketingAdjustedAmount"
          },
          "adjustmentPct": {
            "$ref": "#/components/schemas/ticketingAdjustedDiscountPct"
          },
          "adjustedUnitPrice": {
            "$ref": "#/components/schemas/ticketingAdjustedUnitPrice"
          },
          "adjustedTotalPrice": {
            "$ref": "#/components/schemas/ticketingAdjustedTotalPrice"
          }
        },
        "required": [
          "pricingOption",
          "adjustmentAmount",
          "adjustmentPct",
          "adjustedUnitPrice",
          "adjustedTotalPrice"
        ]
      },
      "ticketingScheduleSales": {
        "title": "ticketingScheduleSales",
        "type": "object",
        "description": "Specifies the sales period for a schedule, indicating when ticket sales start and end for that schedule. Informs clients about the booking window, enabling them to display availability and enforce booking rules accordingly.",
        "properties": {
          "salesFromDate": {
            "type": "string",
            "format": "date",
            "example": "2024-10-11"
          },
          "salesFromTime": {
            "type": "string",
            "example": "00:00"
          },
          "salesUntilDate": {
            "type": "string",
            "format": "date",
            "example": "2024-10-17"
          },
          "salesUntilTime": {
            "type": "string",
            "example": "23:59"
          }
        },
        "required": [
          "salesFromDate",
          "salesFromTime",
          "salesUntilDate",
          "salesUntilTime"
        ]
      },
      "ticketingStoreCatalogResponse": {
        "title": "ticketingStoreCatalogResponse",
        "type": "object",
        "description": "Represents the catalog of ticket items available at a specific store. Includes the store code and a list of items that customers can browse and purchase.",
        "properties": {
          "storeCode": {
            "$ref": "#/components/schemas/ticketingStoreCode"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingItem"
            }
          }
        },
        "required": [
          "storeCode",
          "items"
        ]
      },
      "ticketingItem": {
        "title": "ticketingItem",
        "type": "object",
        "description": "Describes a ticket item available for sale, including its unique identifier, pricing, type, descriptions, and associated admissions. Used to present detailed ticket options to customers.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/ticketingItemNumber"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingItemVariant"
            },
            "nullable": true
          },
          "recommendedPrice": {
            "$ref": "#/components/schemas/ticketingRecommendedPrice"
          },
          "ticketType": {
            "$ref": "#/components/schemas/ticketingTicketType"
          },
          "description": {
            "$ref": "#/components/schemas/ticketingDescriptions"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingAdmissionCatalog"
            }
          }
        },
        "required": [
          "itemNumber",
          "recommendedPrice",
          "ticketType",
          "description",
          "contents"
        ]
      },
      "ticketingItemVariant": {
        "title": "ticketingItemVariant",
        "type": "object",
        "description": "Additional details for an item number. If the item number is a variant, this will contain the variant code, description and the specific item number for that combination .",
        "properties": {
          "variantCode": {
            "type": "string"
          },
          "eanItemNumber": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "variantCode",
          "eanItemNumber",
          "description"
        ]
      },
      "ticketingRecommendedPrice": {
        "title": "ticketingRecommendedPrice",
        "type": "object",
        "description": "Suggests a base price for a ticket item before any adjustments like discounts or dynamic pricing. Assists in displaying price information to customers during their purchasing decision.",
        "properties": {
          "unitPrice": {
            "$ref": "#/components/schemas/ticketingUnitPrice"
          },
          "unitPriceIncludesVat": {
            "$ref": "#/components/schemas/ticketingUnitPriceIncludesVat"
          },
          "vatPct": {
            "type": "number",
            "format": "double",
            "example": 25
          },
          "currencyCode": {
            "type": "string",
            "example": "SEK"
          }
        },
        "required": [
          "unitPrice",
          "unitPriceIncludesVat",
          "vatPct",
          "currencyCode"
        ]
      },
      "ticketingTicketType": {
        "title": "ticketingTicketType",
        "type": "object",
        "description": "Categorizes the ticket item based on sales channels or functional groupings, such as \"WEB\" or \"POS\". Influences how the ticket is sold and processed within the system.",
        "properties": {
          "code": {
            "type": "string",
            "example": "WEB"
          },
          "description": {
            "type": "string",
            "example": "Web sales"
          },
          "category": {
            "type": "string",
            "example": "Online"
          }
        },
        "required": [
          "code",
          "description",
          "category"
        ]
      },
      "ticketingAdmissionCatalog": {
        "title": "ticketingAdmissionCatalog",
        "type": "object",
        "description": "Details the admissions included with a ticket item, specifying access rights like entry to events or exhibits. Informs customers about what experiences are included with their purchase.",
        "properties": {
          "capacityControl": {
            "$ref": "#/components/schemas/ticketingCapacityControl"
          },
          "maxCapacity": {
            "type": "integer",
            "nullable": true
          },
          "scheduleSelection": {
            "$ref": "#/components/schemas/ticketingScheduleSelection"
          }
        },
        "required": [
          "capacityControl",
          "scheduleSelection"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ticketingAdmissionBase"
          }
        ]
      },
      "ticketingCreateReservationRequest": {
        "title": "ticketingCreateReservationRequest",
        "type": "object",
        "description": "Used when initiating a new reservation for tickets. Contains a list of items (reserve) that the customer wants to reserve, specifying the ticket item numbers, quantities, and any additional content like admissions and schedules.",
        "properties": {
          "reserve": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingCreateReservationItemRequest"
            }
          }
        },
        "required": [
          "reserve"
        ]
      },
      "ticketingConfirmReservationRequest": {
        "title": "ticketingConfirmReservationRequest",
        "type": "object",
        "description": "Submitted when confirming a reservation, finalizing the ticket purchase. May include customer details such as ticketHolder name, notificationAddress for sending tickets or notifications, and a paymentReference to link the reservation to a payment transaction.",
        "properties": {
          "ticketHolder": {
            "$ref": "#/components/schemas/ticketingTicketHolder",
            "nullable": true
          },
          "notificationAddress": {
            "$ref": "#/components/schemas/ticketingNotificationAddress",
            "nullable": true
          },
          "paymentReference": {
            "$ref": "#/components/schemas/ticketingPaymentReference",
            "nullable": true
          }
        }
      },
      "ticketingCreateReservationItemRequest": {
        "title": "ticketingCreateReservationItemRequest",
        "type": "object",
        "description": "Represents an individual ticket item within a reservation request. Includes the itemNumber, the desired quantity of tickets, and optional content detailing specific admissions or schedules associated with the ticket.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/ticketingItemNumber"
          },
          "quantity": {
            "$ref": "#/components/schemas/ticketingNumberOfTickets"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingTicketContentRequest"
            },
            "nullable": true
          }
        },
        "required": [
          "itemNumber",
          "quantity"
        ]
      },
      "ticketingGetReservationDetails": {
        "title": "ticketingGetReservationDetails",
        "type": "object",
        "description": "Returned in response to reservation-related operations to provide the current state of the reservation. Includes the token identifying the reservation, its expiresAt timestamp, reservationStatus, and a list of reserved items (reservations) with their details.",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/ticketingToken"
          },
          "expiresAt": {
            "$ref": "#/components/schemas/ticketingExpiresAt",
            "nullable": true
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ticketingReservationStatus"
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingReservationItemDetails"
            }
          }
        },
        "required": [
          "token",
          "reservationStatus",
          "reservations"
        ]
      },
      "ticketingReservationActionResponse": {
        "title": "ticketingReservationActionResponse",
        "type": "object",
        "description": "Provides a simplified response after performing actions like canceling or pre-confirming a reservation. Includes the updated reservationStatus and optionally the new expiresAt time if the reservation's lifespan was extended.",
        "properties": {
          "expiresAt": {
            "$ref": "#/components/schemas/ticketingExpiresAt",
            "nullable": true
          },
          "reservationStatus": {
            "$ref": "#/components/schemas/ticketingReservationStatus"
          }
        },
        "required": [
          "reservationStatus"
        ]
      },
      "ticketingReservationItemDetails": {
        "title": "ticketingReservationItemDetails",
        "type": "object",
        "description": "Contains detailed information about a specific item in a reservation. Includes the itemNumber, quantity reserved, associated ticket details, and a list of content items specifying admissions or other components included with the ticket.",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/ticketingItemNumber"
          },
          "quantity": {
            "$ref": "#/components/schemas/ticketingNumberOfTickets"
          },
          "ticket": {
            "$ref": "#/components/schemas/ticketingReservationTicketDetails"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingTicketContentDetails"
            }
          }
        },
        "required": [
          "itemNumber",
          "quantity",
          "ticket",
          "content"
        ]
      },
      "ticketingTicketContentDetails": {
        "title": "ticketingTicketContentDetails",
        "type": "object",
        "description": "Provides details about the admissions or content associated with a reserved ticket item. Contains admissionDetails that specify the particular admissions, schedules, and any relevant information for each component of the ticket.",
        "properties": {
          "admissionDetails": {
            "$ref": "#/components/schemas/ticketingAdmissionDetails"
          }
        },
        "required": [
          "admissionDetails"
        ]
      },
      "ticketingAdmissionDetailsFull": {
        "title": "ticketingAdmissionDetailsFull",
        "type": "object",
        "description": "Extends AdmissionDetails with additional information specific to reservations, such as the reschedulePolicy. Offers comprehensive details about an admission, including policies affecting changes after reservation.",
        "properties": {
          "reschedulePolicy": {
            "type": "string"
          }
        },
        "required": [
          "reschedulePolicy"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ticketingAdmissionDetails"
          }
        ]
      },
      "ticketingReservationTicketDetails": {
        "title": "ticketingReservationTicketDetails",
        "type": "object",
        "description": "Offers detailed ticket information within a reservation, including ticketNumbers if confirmed, validity periods (validFrom, validUntil), pricing details, and optional customer information like pinCode and ticketHolder name. Used to inform customers about their tickets and any actions they can perform.",
        "properties": {
          "ticketNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingTicketId"
            },
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-15T00:00:00Z"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-15T23:59:59Z"
          },
          "pinCode": {
            "$ref": "#/components/schemas/ticketingPinCode",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "example": 80
          },
          "unitPriceInclVat": {
            "type": "number",
            "format": "double",
            "example": 100
          },
          "currencyCode": {
            "type": "string",
            "example": "DKK"
          },
          "ticketHolder": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "validFrom",
          "validUntil",
          "unitPrice",
          "unitPriceInclVat",
          "currencyCode"
        ]
      },
      "ticketingGetTicketsRequest": {
        "title": "ticketingGetTicketsRequest",
        "type": "object",
        "description": "Request to get ticket details",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          }
        },
        "required": [
          "ticketNumber"
        ]
      },
      "ticketingValidateTicketsRequest": {
        "title": "ticketingValidateTicketsRequest",
        "type": "object",
        "description": "Request to validate a ticket",
        "properties": {
          "admissionCode": {
            "$ref": "#/components/schemas/ticketingAdmissionCode",
            "nullable": true
          },
          "scannerStation": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ticketingSendTicketRequest": {
        "title": "ticketingSendTicketRequest",
        "type": "object",
        "description": "Request to send a ticket as an e-ticket",
        "properties": {
          "notificationAddress": {
            "$ref": "#/components/schemas/ticketingNotificationAddress"
          }
        },
        "required": [
          "notificationAddress"
        ]
      },
      "ticketingCreateMemberReservationRequest": {
        "title": "ticketingCreateMemberReservationRequest",
        "type": "object",
        "description": "Request to validate a member arrival",
        "properties": {
          "reserve": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingCreateMemberReservationItemRequest"
            }
          }
        },
        "required": [
          "reserve"
        ]
      },
      "ticketingGetTicketCouponRequest": {
        "title": "ticketingGetTicketCouponRequest",
        "type": "object",
        "description": "Request to exchange a ticket for a coupon",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "couponCode": {
            "$ref": "#/components/schemas/ticketingCouponCode",
            "nullable": true
          }
        },
        "required": [
          "ticketNumber"
        ]
      },
      "ticketingTicketCouponResponse": {
        "title": "ticketingTicketCouponResponse",
        "type": "object",
        "properties": {
          "couponId": {
            "$ref": "#/components/schemas/ticketingCouponId"
          }
        },
        "required": [
          "couponId"
        ]
      },
      "ticketingCreateMemberReservationItemRequest": {
        "title": "ticketingCreateMemberReservationItemRequest",
        "type": "object",
        "properties": {
          "itemNumber": {
            "$ref": "#/components/schemas/ticketingItemNumber"
          },
          "quantity": {
            "$ref": "#/components/schemas/ticketingNumberOfTickets"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingTicketContentRequest"
            },
            "nullable": true
          }
        },
        "required": [
          "itemNumber",
          "quantity"
        ]
      },
      "ticketingActionResponseSuccess": {
        "title": "ticketingActionResponseSuccess",
        "type": "boolean",
        "description": "Indicates whether the action was successful"
      },
      "ticketingActionResponseCode": {
        "title": "ticketingActionResponseCode",
        "type": "string",
        "description": "A code that identifies the reason of the action result"
      },
      "ticketingActionResponseMessage": {
        "title": "ticketingActionResponseMessage",
        "type": "string",
        "description": "A message that describes the result of the action"
      },
      "ticketingRevokedResponse": {
        "title": "ticketingRevokedResponse",
        "type": "object",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "revoked": {
            "$ref": "#/components/schemas/ticketingActionResponseSuccess"
          },
          "code": {
            "$ref": "#/components/schemas/ticketingActionResponseCode",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/ticketingActionResponseMessage",
            "nullable": true
          }
        },
        "required": [
          "ticketNumber",
          "revoked"
        ]
      },
      "ticketingAdmittedResponse": {
        "title": "ticketingAdmittedResponse",
        "type": "object",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "admitted": {
            "$ref": "#/components/schemas/ticketingAdmitted"
          },
          "code": {
            "$ref": "#/components/schemas/ticketingActionResponseCode",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/ticketingActionResponseMessage",
            "nullable": true
          }
        },
        "required": [
          "ticketNumber",
          "admitted"
        ]
      },
      "ticketingDepartedResponse": {
        "title": "ticketingDepartedResponse",
        "type": "object",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "departed": {
            "$ref": "#/components/schemas/ticketingDeparted"
          },
          "code": {
            "$ref": "#/components/schemas/ticketingActionResponseCode",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/ticketingActionResponseMessage",
            "nullable": true
          }
        },
        "required": [
          "ticketNumber",
          "departed"
        ]
      },
      "ticketingTicketSentResponse": {
        "title": "ticketingTicketSentResponse",
        "type": "object",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "ticketSent": {
            "$ref": "#/components/schemas/ticketingTicketSent"
          },
          "code": {
            "$ref": "#/components/schemas/ticketingActionResponseCode",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/ticketingActionResponseMessage",
            "nullable": true
          }
        },
        "required": [
          "ticketNumber",
          "ticketSent"
        ]
      },
      "ticketingTicketContentRequest": {
        "title": "ticketingTicketContentRequest",
        "type": "object",
        "properties": {
          "admissionCode": {
            "$ref": "#/components/schemas/ticketingAdmissionCode"
          },
          "scheduleId": {
            "$ref": "#/components/schemas/ticketingScheduleId",
            "nullable": true
          }
        },
        "required": [
          "admissionCode"
        ]
      },
      "ticketingAdmissionBase": {
        "title": "ticketingAdmissionBase",
        "type": "object",
        "description": "An admission component for a specific item number.",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ticketingAdmissionCode"
          },
          "description": {
            "$ref": "#/components/schemas/ticketingDescriptions",
            "nullable": true
          },
          "default": {
            "$ref": "#/components/schemas/ticketingDefaultAdmission"
          },
          "included": {
            "$ref": "#/components/schemas/ticketingAdmissionIsIncluded"
          }
        },
        "required": [
          "code",
          "default",
          "included"
        ]
      },
      "ticketingAdmissionDetails": {
        "title": "ticketingAdmissionDetails",
        "type": "object",
        "description": "Details of the admission for a specific reservation",
        "properties": {
          "scheduleDetails": {
            "$ref": "#/components/schemas/ticketingScheduleDetails",
            "nullable": true
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ticketingAdmissionBase"
          }
        ]
      },
      "ticketingScheduleDetails": {
        "title": "ticketingScheduleDetails",
        "type": "object",
        "description": "Details of the schedule for a specific time slot.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ticketingScheduleId"
          },
          "code": {
            "type": "string",
            "example": "MORNING"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2024-10-15"
          },
          "startTime": {
            "type": "string",
            "example": "09:00"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2024-10-15"
          },
          "endTime": {
            "type": "string",
            "example": "12:00"
          },
          "duration": {
            "type": "string",
            "example": "3 hours"
          },
          "arrivalFromTime": {
            "$ref": "#/components/schemas/ticketingArrivalFromTime",
            "nullable": true
          },
          "arrivalUntilTime": {
            "$ref": "#/components/schemas/ticketingArrivalUntilTime",
            "nullable": true
          }
        },
        "required": [
          "id",
          "code",
          "startDate",
          "startTime",
          "endDate",
          "endTime",
          "duration"
        ]
      },
      "ticketingDescriptions": {
        "title": "ticketingDescriptions",
        "type": "object",
        "description": "Descriptive information about a ticket item. The source of these fields are configurable.",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fullDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ticketingTicketDetails": {
        "title": "ticketingTicketDetails",
        "type": "object",
        "description": "Details of the ticket",
        "properties": {
          "ticketNumber": {
            "$ref": "#/components/schemas/ticketingTicketId"
          },
          "reservationToken": {
            "$ref": "#/components/schemas/ticketingToken"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-15T00:00:00Z"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-15T23:59:59Z"
          },
          "pinCode": {
            "$ref": "#/components/schemas/ticketingPinCode",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unitPriceInclVat": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "ticketHolder": {
            "type": "string",
            "nullable": true
          },
          "admissionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketingAdmissionDetails"
            }
          },
          "description": {
            "$ref": "#/components/schemas/ticketingDescriptions"
          }
        },
        "required": [
          "ticketNumber",
          "reservationToken",
          "validFrom",
          "validUntil",
          "admissionDetails",
          "description"
        ]
      },
      "ticketingErrorMessageResponse": {
        "title": "ticketingErrorMessageResponse",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ticketingErrorCode"
          },
          "message": {
            "$ref": "#/components/schemas/ticketingErrorDescription"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "ticketingErrorCode": {
        "title": "ticketingErrorCode",
        "type": "string",
        "description": "A unique identifier for an error"
      },
      "ticketingErrorDescription": {
        "title": "ticketingErrorDescription",
        "type": "string",
        "description": "A description of the error"
      },
      "ticketingToken": {
        "title": "ticketingToken",
        "type": "string",
        "description": "A unique token that identifies a ticket reservation"
      },
      "ticketingItemNumber": {
        "title": "ticketingItemNumber",
        "type": "string",
        "description": "An item or product number defined in the ticketing system"
      },
      "ticketingAdmissionCode": {
        "title": "ticketingAdmissionCode",
        "type": "string",
        "description": "A unique code that identifies a specific admission."
      },
      "ticketingScheduleId": {
        "title": "ticketingScheduleId",
        "type": "integer",
        "description": "The ID of a specific time slot for a specific admission"
      },
      "ticketingNumberOfTickets": {
        "title": "ticketingNumberOfTickets",
        "type": "integer",
        "description": "The number of tickets to reserved"
      },
      "ticketingExpiresAt": {
        "title": "ticketingExpiresAt",
        "type": "string",
        "format": "date-time",
        "description": "The date and time when the token expires and reservation is no longer valid"
      },
      "ticketingTicketHolder": {
        "title": "ticketingTicketHolder",
        "type": "string",
        "description": "The name of the person holding the ticket(s)"
      },
      "ticketingNotificationAddress": {
        "title": "ticketingNotificationAddress",
        "type": "string",
        "description": "The email address or mobile phone number to send tickets and notifications to"
      },
      "ticketingPaymentReference": {
        "title": "ticketingPaymentReference",
        "type": "string",
        "description": "A reference to the payment transaction. Unless provided, the reservation is not considered paid. A confirmed unpaid reservation must be paid on site before the tickets are valid for usage."
      },
      "ticketingReservationStatusEnum": {
        "title": "ticketingReservationStatusEnum",
        "type": "string",
        "enum": [
          "registered",
          "confirmed",
          "cancelled",
          "expired"
        ]
      },
      "ticketingReservationStatus": {
        "title": "ticketingReservationStatus",
        "$ref": "#/components/schemas/ticketingReservationStatusEnum",
        "description": "The status of the reservation"
      },
      "ticketingTicketId": {
        "title": "ticketingTicketId",
        "type": "string",
        "description": "The unique identifier of a ticket"
      },
      "ticketingPinCode": {
        "title": "ticketingPinCode",
        "type": "string",
        "description": "A pin code for the ticket, used for validation when rescheduling or revoking a confirmed ticket"
      },
      "ticketingUnitPrice": {
        "title": "ticketingUnitPrice",
        "type": "number",
        "format": "double",
        "description": "The unit price of the ticket."
      },
      "ticketingUnitPriceIncludesVat": {
        "title": "ticketingUnitPriceIncludesVat",
        "type": "boolean",
        "description": "Indicates if the unit price includes VAT."
      },
      "ticketingDiscountPct": {
        "title": "ticketingDiscountPct",
        "type": "number",
        "format": "double",
        "description": "The discount percentage for the admission based either on the customer or the quantity of tickets."
      },
      "ticketingVatPct": {
        "title": "ticketingVatPct",
        "type": "number",
        "format": "double",
        "description": "The VAT percentage for the admission."
      },
      "ticketingStoreCode": {
        "title": "ticketingStoreCode",
        "type": "string",
        "description": "A unique identifier for a store - a logical grouping defining a subset of ticket items. This is used to filter the list of ticket items returned by the API."
      },
      "ticketingCustomerNumber": {
        "title": "ticketingCustomerNumber",
        "type": "string",
        "description": "The customer number of the user making the request. The customer number affects pricing."
      },
      "ticketingReferenceDate": {
        "title": "ticketingReferenceDate",
        "type": "string",
        "format": "date",
        "description": "A date to use as a reference for the capacity search. If not specified, the current date will be used."
      },
      "ticketingReferenceDateTime": {
        "title": "ticketingReferenceDateTime",
        "type": "string",
        "format": "date-time",
        "description": "A date and time to use as a reference for the capacity search. If not specified, the current date and time will be used."
      },
      "ticketingDefaultAdmission": {
        "title": "ticketingDefaultAdmission",
        "type": "boolean",
        "description": "Indicates if this admission is the default admission when there are multiple admission defined."
      },
      "ticketingAdmissionIsIncludedEnum": {
        "title": "ticketingAdmissionIsIncludedEnum",
        "type": "string",
        "enum": [
          "mandatory",
          "optional",
          "optionalSelected"
        ]
      },
      "ticketingAdmissionIsIncluded": {
        "title": "ticketingAdmissionIsIncluded",
        "$ref": "#/components/schemas/ticketingAdmissionIsIncludedEnum",
        "description": "Indicates if the admission is mandatory or optional. Mandatory implies that the admission can not be deselected. Optional implies that you must opt-in to include the admission, while optionalSelected implies that the admission is optional but selected by default."
      },
      "ticketingCapacityControlEnum": {
        "title": "ticketingCapacityControlEnum",
        "type": "string",
        "enum": [
          "none",
          "sales",
          "admitted",
          "full"
        ]
      },
      "ticketingCapacityControl": {
        "title": "ticketingCapacityControl",
        "$ref": "#/components/schemas/ticketingCapacityControlEnum",
        "description": "Indicates the type of capacity control for the admission. None implies that there is no capacity control. Sales implies that the capacity is controlled by the number of tickets sold. Admitted implies that the capacity is controlled by the number of tickets admitted. Full implies that the capacity is admitted and departed."
      },
      "ticketingScheduleSelectionEnum": {
        "title": "ticketingScheduleSelectionEnum",
        "type": "string",
        "enum": [
          "noScheduleSelection",
          "currentSchedule",
          "nextAvailableSchedule"
        ]
      },
      "ticketingScheduleSelection": {
        "title": "ticketingScheduleSelection",
        "$ref": "#/components/schemas/ticketingScheduleSelectionEnum",
        "description": "All reservations require a schedule id. However, this field indicates the type of automation you get when performing a reservation without providing schedule id for the admission. _ NoScheduleSelection implies that there is no *automatic* schedule selection when no schedule id provided (reservation will fail). _ CurrentSchedule implies that the current schedule (aka \"today\") is selected. \\* NextAvailableSchedule implies that the next available schedule is selected. The current and Next-available select rules work well in a POS sales scenario."
      },
      "ticketingPricingOptionEnum": {
        "title": "ticketingPricingOptionEnum",
        "type": "string",
        "enum": [
          "fixed",
          "dynamic_fixed_amount",
          "dynamic_relative_amount",
          "dynamic_percentage"
        ]
      },
      "ticketingPricingOption": {
        "title": "ticketingPricingOption",
        "$ref": "#/components/schemas/ticketingPricingOptionEnum",
        "description": "The pricing option for the schedule. Fixed implies that the price is fixed - calculated by the ERP module only. Dynamic_fixed_amount implies that the price is fixed but set by the schedule rather than the ERP module. Dynamic_relative_amount implies that the base price is from the ERP module and offset by a relative amount defined by the schedule. Dynamic_percentage implies that the base price is from the ERP module and offset by a percentage defined by the schedule."
      },
      "ticketingAdjustedAmount": {
        "title": "ticketingAdjustedAmount",
        "type": "number",
        "format": "double",
        "description": "The amount used to adjust admission unit price."
      },
      "ticketingAdjustedDiscountPct": {
        "title": "ticketingAdjustedDiscountPct",
        "type": "number",
        "format": "double",
        "description": "The percentage used to adjust admission unit price."
      },
      "ticketingAdjustedUnitPrice": {
        "title": "ticketingAdjustedUnitPrice",
        "type": "number",
        "format": "double",
        "description": "The calculated adjusted unit price for the admission."
      },
      "ticketingAdjustedTotalPrice": {
        "title": "ticketingAdjustedTotalPrice",
        "type": "number",
        "format": "double",
        "description": "The calculated adjusted total price for the admission. (Adjusted unit price \\* quantity)."
      },
      "ticketingArrivalFromTime": {
        "title": "ticketingArrivalFromTime",
        "type": "string",
        "description": "The earliest time a customer can arrive for the time slot."
      },
      "ticketingArrivalUntilTime": {
        "title": "ticketingArrivalUntilTime",
        "type": "string",
        "description": "The latest time a customer can arrive for the time slot."
      },
      "ticketingAllocatable": {
        "title": "ticketingAllocatable",
        "type": "boolean",
        "description": "Indicates if the schedule is allocatable. This boolean is used to determine if the schedule can be booked and considers arrival times and capacity."
      },
      "ticketingAllocationModelEnum": {
        "title": "ticketingAllocationModelEnum",
        "type": "string",
        "enum": [
          "capacity",
          "waiting_list"
        ]
      },
      "ticketingAllocationModel": {
        "title": "ticketingAllocationModel",
        "$ref": "#/components/schemas/ticketingAllocationModelEnum",
        "description": "Whether the schedule is allocated based on capacity or waiting list. When the allocation model is waiting list, the reservation requires a waiting list ID."
      },
      "ticketingRemainingCapacity": {
        "title": "ticketingRemainingCapacity",
        "type": "integer",
        "description": "The remaining capacity for the schedule. Note that this number can be positive even when the schedule is not allocatable."
      },
      "ticketingAllocationExplanation": {
        "title": "ticketingAllocationExplanation",
        "type": "string",
        "description": "An explanation why the schedule is allocatable or not allocatable."
      },
      "ticketingMemberNumber": {
        "title": "ticketingMemberNumber",
        "type": "string",
        "description": "The unique identifier of a member"
      },
      "ticketingScannerStation": {
        "title": "ticketingScannerStation",
        "type": "string",
        "description": "The name of the scanner station"
      },
      "ticketingCouponCode": {
        "title": "ticketingCouponCode",
        "type": "string",
        "description": "The alias of the coupon type. This is used to identify the coupon type in the system."
      },
      "ticketingCouponId": {
        "title": "ticketingCouponId",
        "type": "string",
        "description": "The unique identifier of a coupon"
      },
      "ticketingAdmitted": {
        "title": "ticketingAdmitted",
        "type": "boolean",
        "description": "Indicates whether the ticket has been registered as admitted to the admission"
      },
      "ticketingDeparted": {
        "title": "ticketingDeparted",
        "type": "boolean",
        "description": "Indicates whether the ticket has been registered as departed from the admission"
      },
      "ticketingTicketSent": {
        "title": "ticketingTicketSent",
        "type": "boolean",
        "description": "Indicates whether the ticket has been sent as an e-ticket"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.npretail.app",
      "description": "Production"
    }
  ]
}